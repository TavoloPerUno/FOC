<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2014 rel. 2 sp1 (x64) - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:map="http://www.w3.org/2005/xpath-functions/map" xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="#all">
	<xsl:import href="C:\Users\Manoradhan M\Desktop\Projects\Catalogs\Catalogs\StyleCatalogs\25 Aug\XSLT\groupingInXSLT1.xslt"/>
	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
	<xsl:param name="altova:bGeneratingFromPxf" select="false()"/>
	<xsl:param name="SV_OutputFormat" select="'PDF'"/>
	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">
		<xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>
	</xsl:param>
	<xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;CourseCatalog&apos;" as="xs:string?"/>
	<xsl:param name="language" select="'de'"/>
	<xsl:param name="locationGroups" select="'3'"/>
	<xsl:param name="XML2"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:param name="XML3"/>
	<xsl:param name="XML4"/>
	<xsl:param name="XML5"/>
	<xsl:import-schema schema-location="file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/25%20Aug/XML%20Schema/Translation-List.xsd" use-when="system-property('xsl:is-schema-aware')='yes'"/>
	<xsl:import-schema schema-location="file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/25%20Aug/XML%20Schema/CourseList.xsd" use-when="system-property('xsl:is-schema-aware')='yes'"/>
	<xsl:import-schema schema-location="file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/25%20Aug/XML%20Schema/Number-List.xsd" use-when="system-property('xsl:is-schema-aware')='yes'"/>
	<xsl:import-schema schema-location="file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/1%20Sept/XML%20Schema/LocationList.xsd" use-when="system-property('xsl:is-schema-aware')='yes'"/>
	<xsl:import-schema schema-location="file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/1%20Sept/XML%20Schema/Country-List.xsd" use-when="system-property('xsl:is-schema-aware')='yes'"/>
	<xsl:variable name="fo:layout-master-set">
		<fo:layout-master-set>
			<fo:simple-page-master master-name="page-master-0-even" margin-left="0.50in" margin-right="0.50in" page-height="11.69in" page-width="8.27in" margin-top="0.30in" margin-bottom="0.30in">
				<fo:region-body margin-top="0.50in" margin-bottom="0.50in" column-count="1" column-gap="0.50in"/>
				<fo:region-before region-name="even-page-header" overflow="hidden" extent="0.50in"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-odd" margin-left="0.50in" margin-right="0.50in" page-height="11.69in" page-width="8.27in" margin-top="0.30in" margin-bottom="0.30in">
				<fo:region-body margin-top="0.50in" margin-bottom="0.50in" column-count="1" column-gap="0.50in"/>
				<fo:region-before region-name="odd-page-header" overflow="hidden" extent="0.50in"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-even-first" margin-left="0.50in" margin-right="0.50in" page-height="11.69in" page-width="8.27in" margin-top="0.30in" margin-bottom="0.30in">
				<fo:region-body margin-top="0.50in" margin-bottom="0.50in" column-count="1" column-gap="0.50in"/>
				<fo:region-before region-name="even-page-header-first" overflow="hidden" extent="0.50in"/>
				<fo:region-after region-name="even-page-footer-first" overflow="hidden" extent="0.50in"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-0-odd-first" margin-left="0.50in" margin-right="0.50in" page-height="11.69in" page-width="8.27in" margin-top="0.30in" margin-bottom="0.30in">
				<fo:region-body margin-top="0.50in" margin-bottom="0.50in" column-count="1" column-gap="0.50in"/>
				<fo:region-before region-name="odd-page-header-first" overflow="hidden" extent="0.50in"/>
				<fo:region-after region-name="odd-page-footer-first" overflow="hidden" extent="0.50in"/>
			</fo:simple-page-master>
			<fo:page-sequence-master master-name="page-master-0">
				<fo:repeatable-page-master-alternatives>
					<fo:conditional-page-master-reference master-reference="page-master-0-even-first" odd-or-even="even" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-odd-first" odd-or-even="odd" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-even" odd-or-even="even"/>
					<fo:conditional-page-master-reference master-reference="page-master-0-odd" odd-or-even="odd"/>
				</fo:repeatable-page-master-alternatives>
			</fo:page-sequence-master>
		</fo:layout-master-set>
	</xsl:variable>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:variable name="altova:CssImages">
		<altova:CssImage altova:sUrl="file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/25%20Aug/Images/greenGradient.png"/>
	</xsl:variable>
	<xsl:key name="altova:id-key" match="document-node()|node()|@*" use="generate-id()"/>
	<xsl:variable name="altova:bDoFirstSectionBreak" as="xs:boolean" select="true()"/>
	<xsl:variable name="altova:sCssSwitch" as="xs:string" select="''"/>
	<xsl:variable name="altova:nodeCssClasses">
		<Class sFile="" sSelector="HTMLBorder">
			<Styles background="white" border="1pt solid #A9A9A9" border-bottom-left-radius="12pt" border-bottom-right-radius="12pt" box-shadow="1px 1px 2px #000" display="block" line-height="171%" margin-bottom="10pt" margin-right="5pt" padding-bottom="2pt" padding-left="13pt" padding-right="inherit" padding-top="2pt" width="100%"/>
		</Class>
		<Class sFile="" sSelector="HTMLh2">
			<Styles background-image="url(file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/25%20Aug/Images/greenGradient.png)" background-size="cover" border-top-left-radius="9pt" border-top-right-radius="9pt" box-shadow="1px 1px 2px #000" color="white" display="block" font-size="18pt" line-height="150%" margin="0" margin-top="2pt" padding-bottom="2pt" padding-left="15pt" padding-right="inherit" padding-top="2pt" width="100%"/>
		</Class>
		<Class sFile="" sSelector="TOCBlock">
			<Styles font-family="Verdana, Geneva, sans-serif" line-height="171%"/>
		</Class>
		<Class sFile="" sSelector="caption">
			<Styles font-weight="bold"/>
		</Class>
		<Class sFile="" sSelector="cityHeader">
			<Styles background-color="#B2C675" color="Black" font-size="10pt" margin-top="2pt" padding=".2em"/>
		</Class>
		<Class sFile="" sSelector="cityThumbnail">
			<Styles height=".55in" width=".63in"/>
		</Class>
		<Class sFile="" sSelector="dateCell">
			<Styles border-bottom-color="#B2C675" border-bottom-style="solid" border-bottom-width="1pt" border-left-color="#B2C675" border-left-style="solid" border-left-width="1pt" border-right-color="#B2C675" border-right-style="solid" border-right-width="1pt" display="block" font-family="Verdana, Geneva, sans-serif" font-size="9pt" margin="0pt" text-align="center" width="auto"/>
		</Class>
		<Class sFile="" sSelector="emphasis">
			<Styles font-weight="bold"/>
		</Class>
		<Class sFile="" sSelector="htmlTable">
			<Styles display="inline-table" float="right"/>
		</Class>
		<Class sFile="" sSelector="inline">
			<Styles display="inline" float="inherit"/>
		</Class>
		<Class sFile="" sSelector="keepTogether">
			<Styles keep-together="always"/>
		</Class>
		<Class sFile="" sSelector="length">
			<Styles font-style="italic"/>
		</Class>
		<Class sFile="" sSelector="subtitleBorder">
			<Styles background-color="#e1e1e1"/>
		</Class>
		<Class sFile="" sSelector="super">
			<Styles font-size="4pt" vertical-align="super"/>
		</Class>
	</xsl:variable>
	<xsl:variable name="altova:design-xslt-tree-view-before-toc">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<altova:main-document url="{if ($SV_BaseOutputFileName) then concat($SV_BaseOutputFileName,'.fo') else ''}">
			<fo:root>
				<xsl:copy-of select="$fo:layout-master-set"/>
				<fo:declarations>
					<x:xmpmeta xmlns:x="adobe:ns:meta/">
						<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
							<rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
								<xmp:CreatorTool>Altova StyleVision Enterprise Edition 2014 rel. 2 sp1 (x64) (http://www.altova.com)</xmp:CreatorTool>
							</rdf:Description>
						</rdf:RDF>
					</x:xmpmeta>
				</fo:declarations>
				<altova:pdf-bookmark-tree generate-from-toc="true"/>
				<fo:page-sequence master-reference="page-master-0" initial-page-number="auto" format="1" force-page-count="no-force">
					<fo:static-content flow-name="odd-page-header-first">
						<fo:block-container overflow="hidden" display-align="before">
							<fo:block>
								<altova:line-break/>
								<fo:block text-align="center">
									<fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
								</fo:block>
							</fo:block>
						</fo:block-container>
					</fo:static-content>
					<fo:static-content flow-name="even-page-header-first">
						<fo:block-container overflow="hidden" display-align="before">
							<fo:block>
								<altova:line-break/>
								<fo:block text-align="center">
									<fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
								</fo:block>
							</fo:block>
						</fo:block-container>
					</fo:static-content>
					<fo:static-content flow-name="odd-page-header">
						<fo:block-container overflow="hidden" display-align="before">
							<fo:block>
								<xsl:variable name="altova:table">
									<fo:table width="100%" table-layout="fixed" border-spacing="2pt">
										<fo:table-column column-width="4.570in"/>
										<fo:table-column column-width="2.410in"/>
										<xsl:variable name="altova:CurrContextGrid_1" select="."/>
										<xsl:variable name="altova:ColumnData"/>
										<fo:table-body start-indent="0pt">
											<fo:table-row height="0.33in" alignment-baseline="before-edge">
												<fo:table-cell font-family="Verdana" font-size="10pt" padding="0" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/Comelio-Logo-Small.png&apos;"/>
															<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
																<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
																	<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
																		<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:sequence select="(0, 0)"/>
																	</xsl:otherwise>
																</xsl:choose>
																<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
															</xsl:variable>
															<fo:external-graphic>
																<xsl:if test="$altova:seqWidthHeight[2] != 0">
																	<xsl:attribute name="scaling" select="'non-uniform'"/>
																	<xsl:variable name="sContent-height">
																		<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																			<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[2], &apos;px&apos;)"/>
																		</xsl:call-template>
																	</xsl:variable>
																	<xsl:if test="$sContent-height != ''">
																		<xsl:attribute name="content-height">
																			<xsl:value-of select="$sContent-height"/>
																		</xsl:attribute>
																	</xsl:if>
																</xsl:if>
																<xsl:if test="$altova:seqWidthHeight[1] != 0">
																	<xsl:attribute name="scaling" select="'non-uniform'"/>
																	<xsl:variable name="sContent-width">
																		<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																			<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[1], &apos;px&apos;)"/>
																		</xsl:call-template>
																	</xsl:variable>
																	<xsl:if test="$sContent-width != ''">
																		<xsl:attribute name="content-width">
																			<xsl:value-of select="$sContent-width"/>
																		</xsl:attribute>
																	</xsl:if>
																</xsl:if>
																<xsl:attribute name="src">
																	<xsl:text>url(</xsl:text>
																	<xsl:call-template name="altova:double-backslash">
																		<xsl:with-param name="text">
																			<xsl:value-of select="string(&apos;../Images/Comelio-Logo-Small.png&apos;)"/>
																		</xsl:with-param>
																		<xsl:with-param name="text-length">
																			<xsl:value-of select="string-length(string(&apos;../Images/Comelio-Logo-Small.png&apos;))"/>
																		</xsl:with-param>
																	</xsl:call-template>
																	<xsl:text>)</xsl:text>
																</xsl:attribute>
															</fo:external-graphic>
															<fo:inline>
																<xsl:text>&#x200B;</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell font-family="Verdana" font-size="10pt" padding="0" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="right">
															<fo:page-number color="#a5a5a5"/>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
											</fo:table-row>
										</fo:table-body>
									</fo:table>
								</xsl:variable>
								<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
							</fo:block>
						</fo:block-container>
					</fo:static-content>
					<fo:static-content flow-name="even-page-header">
						<fo:block-container overflow="hidden" display-align="before">
							<fo:block>
								<xsl:variable name="altova:table">
									<fo:table width="100%" table-layout="fixed" border-spacing="2pt">
										<fo:table-column column-width="3.630in"/>
										<fo:table-column column-width="3.400in"/>
										<xsl:variable name="altova:CurrContextGrid_2" select="."/>
										<xsl:variable name="altova:ColumnData"/>
										<fo:table-body start-indent="0pt">
											<fo:table-row height="0.41in" alignment-baseline="before-edge">
												<fo:table-cell font-family="Verdana" font-size="10pt" padding="0" display-align="before">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<fo:page-number color="#a5a5a5"/>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell font-family="Verdana" font-size="10pt" padding="0" display-align="before">
													<fo:block-container overflow="hidden">
														<fo:block text-align="right">
															<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/Comelio-Logo-Small.png&apos;"/>
															<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
																<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
																	<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
																		<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:sequence select="(0, 0)"/>
																	</xsl:otherwise>
																</xsl:choose>
																<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
															</xsl:variable>
															<fo:external-graphic alignment-baseline="before-edge">
																<xsl:if test="$altova:seqWidthHeight[2] != 0">
																	<xsl:attribute name="scaling" select="'non-uniform'"/>
																	<xsl:variable name="sContent-height">
																		<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																			<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[2], &apos;px&apos;)"/>
																		</xsl:call-template>
																	</xsl:variable>
																	<xsl:if test="$sContent-height != ''">
																		<xsl:attribute name="content-height">
																			<xsl:value-of select="$sContent-height"/>
																		</xsl:attribute>
																	</xsl:if>
																</xsl:if>
																<xsl:if test="$altova:seqWidthHeight[1] != 0">
																	<xsl:attribute name="scaling" select="'non-uniform'"/>
																	<xsl:variable name="sContent-width">
																		<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																			<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[1], &apos;px&apos;)"/>
																		</xsl:call-template>
																	</xsl:variable>
																	<xsl:if test="$sContent-width != ''">
																		<xsl:attribute name="content-width">
																			<xsl:value-of select="$sContent-width"/>
																		</xsl:attribute>
																	</xsl:if>
																</xsl:if>
																<xsl:attribute name="src">
																	<xsl:text>url(</xsl:text>
																	<xsl:call-template name="altova:double-backslash">
																		<xsl:with-param name="text">
																			<xsl:value-of select="string(&apos;../Images/Comelio-Logo-Small.png&apos;)"/>
																		</xsl:with-param>
																		<xsl:with-param name="text-length">
																			<xsl:value-of select="string-length(string(&apos;../Images/Comelio-Logo-Small.png&apos;))"/>
																		</xsl:with-param>
																	</xsl:call-template>
																	<xsl:text>)</xsl:text>
																</xsl:attribute>
															</fo:external-graphic>
															<fo:inline>
																<xsl:text>&#x200B;</xsl:text>
															</fo:inline>
															<fo:inline font-weight="bold">
																<xsl:text>&#160;</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
											</fo:table-row>
										</fo:table-body>
									</fo:table>
								</xsl:variable>
								<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
							</fo:block>
						</fo:block-container>
					</fo:static-content>
					<fo:static-content flow-name="odd-page-footer-first">
						<fo:block-container height="0.50in" overflow="hidden" display-align="after">
							<fo:block>
								<xsl:call-template name="AddressBerlin"/>
							</fo:block>
						</fo:block-container>
					</fo:static-content>
					<fo:static-content flow-name="even-page-footer-first">
						<fo:block-container height="0.50in" overflow="hidden" display-align="after">
							<fo:block>
								<xsl:call-template name="AddressBerlin"/>
							</fo:block>
						</fo:block-container>
					</fo:static-content>
					<fo:flow flow-name="xsl-region-body">
						<fo:block>
							<xsl:for-each select="$XML">
								<altova:line-break/>
								<fo:block font-size="20pt" text-align="center" margin-right="100% - 100%" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
									<xsl:choose>
										<xsl:when test="$language = &apos;en&apos;">
											<fo:inline>
												<xsl:text>Course Catalog</xsl:text>
											</fo:inline>
										</xsl:when>
										<xsl:when test="$language = &apos;de&apos;">
											<fo:inline>
												<xsl:text>Kurskatalog</xsl:text>
											</fo:inline>
										</xsl:when>
									</xsl:choose>
								</fo:block>
								<altova:line-break/>
								<altova:line-break/>
								<fo:block font-size="10pt" line-height="12pt" text-align="center" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
									<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/Comelio-Logo.png&apos;"/>
									<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
										<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
											<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
												<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="(0, 0)"/>
											</xsl:otherwise>
										</xsl:choose>
										<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
									</xsl:variable>
									<fo:external-graphic>
										<xsl:if test="$altova:seqWidthHeight[2] != 0">
											<xsl:attribute name="scaling" select="'non-uniform'"/>
											<xsl:variable name="sContent-height">
												<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
													<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[2], &apos;px&apos;)"/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:if test="$sContent-height != ''">
												<xsl:attribute name="content-height">
													<xsl:value-of select="$sContent-height"/>
												</xsl:attribute>
											</xsl:if>
										</xsl:if>
										<xsl:if test="$altova:seqWidthHeight[1] != 0">
											<xsl:attribute name="scaling" select="'non-uniform'"/>
											<xsl:variable name="sContent-width">
												<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
													<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[1], &apos;px&apos;)"/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:if test="$sContent-width != ''">
												<xsl:attribute name="content-width">
													<xsl:value-of select="$sContent-width"/>
												</xsl:attribute>
											</xsl:if>
										</xsl:if>
										<xsl:attribute name="src">
											<xsl:text>url(</xsl:text>
											<xsl:call-template name="altova:double-backslash">
												<xsl:with-param name="text">
													<xsl:value-of select="string(&apos;../Images/Comelio-Logo.png&apos;)"/>
												</xsl:with-param>
												<xsl:with-param name="text-length">
													<xsl:value-of select="string-length(string(&apos;../Images/Comelio-Logo.png&apos;))"/>
												</xsl:with-param>
											</xsl:call-template>
											<xsl:text>)</xsl:text>
										</xsl:attribute>
									</fo:external-graphic>
									<fo:inline>
										<xsl:text>&#x200B;</xsl:text>
									</fo:inline>
								</fo:block>
								<altova:line-break/>
								<fo:block font-size="10pt" line-height="12pt" text-align="center" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
									<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/Conference%20Room.JPG&apos;"/>
									<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
										<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
											<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
												<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="(0, 0)"/>
											</xsl:otherwise>
										</xsl:choose>
										<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
									</xsl:variable>
									<fo:external-graphic>
										<xsl:if test="$altova:seqWidthHeight[2] != 0">
											<xsl:attribute name="scaling" select="'non-uniform'"/>
											<xsl:variable name="sContent-height">
												<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
													<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[2], &apos;px&apos;)"/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:if test="$sContent-height != ''">
												<xsl:attribute name="content-height">
													<xsl:value-of select="$sContent-height"/>
												</xsl:attribute>
											</xsl:if>
										</xsl:if>
										<xsl:if test="$altova:seqWidthHeight[1] != 0">
											<xsl:attribute name="scaling" select="'non-uniform'"/>
											<xsl:variable name="sContent-width">
												<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
													<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[1], &apos;px&apos;)"/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:if test="$sContent-width != ''">
												<xsl:attribute name="content-width">
													<xsl:value-of select="$sContent-width"/>
												</xsl:attribute>
											</xsl:if>
										</xsl:if>
										<xsl:attribute name="src">
											<xsl:text>url(</xsl:text>
											<xsl:call-template name="altova:double-backslash">
												<xsl:with-param name="text">
													<xsl:value-of select="string(&apos;../Images/Conference%20Room.JPG&apos;)"/>
												</xsl:with-param>
												<xsl:with-param name="text-length">
													<xsl:value-of select="string-length(string(&apos;../Images/Conference%20Room.JPG&apos;))"/>
												</xsl:with-param>
											</xsl:call-template>
											<xsl:text>)</xsl:text>
										</xsl:attribute>
									</fo:external-graphic>
									<fo:inline>
										<xsl:text>&#x200B;</xsl:text>
									</fo:inline>
								</fo:block>
								<altova:page-break/>
								<altova:line-break/>
								<fo:block font-family="Verdana, Geneva, sans-serif" font-size="0.13in" line-height="171%" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
									<altova:toc altova:name="toc"/>
								</fo:block>
								<altova:page-break/>
								<xsl:call-template name="Locations"/>
								<altova:line-break/>
								<altova:page-break/>
								<xsl:apply-templates select="COURSE-LIST"/>
								<altova:line-break/>
								<altova:page-break/>
								<xsl:call-template name="Disclaimer"/>
								<altova:line-break/>
							</xsl:for-each>
						</fo:block>
						<fo:block id="SV_RefID_PageTotal"/>
					</fo:flow>
				</fo:page-sequence>
			</fo:root>
		</altova:main-document>
	</xsl:variable>
	<xsl:template match="altova:toc[ @altova:name = 'toc' ]" mode="altova:generate-toc-xslt-tree">
		<xsl:variable name="altova:source-document" select="ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
		<altova:toc altova:design-id="{generate-id()}">
			<xsl:variable name="altova:current-level-id" select="generate-id( ancestor::altova:level[1] )"/>
			<fo:block font-size="20pt" text-align="center" margin-right="100% - 100%" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
				<xsl:choose>
					<xsl:when test="$language = &apos;en&apos;">
						<fo:inline>
							<xsl:text>Table Of Contents</xsl:text>
						</fo:inline>
					</xsl:when>
					<xsl:when test="$language = &apos;de&apos;">
						<fo:inline>
							<xsl:text>Inhaltsverzeichnis</xsl:text>
						</fo:inline>
					</xsl:when>
				</xsl:choose>
			</fo:block>
			<xsl:for-each select="ancestor::*[self::altova:level | self::altova:main-document][1]">
				<xsl:for-each select="descendant::altova:level[ ancestor::*[self::altova:level | self::altova:main-document][1] is current() ]">
					<xsl:variable name="altova:current-level-id" select="generate-id()"/>
					<fo:block font-size="16pt" font-weight="bold" margin-top="0pt" margin-right="100% - 100%" space-before="0.83em" space-after="0.83em" margin="0pt">
						<xsl:for-each select="descendant::altova:marker[ @altova:name = &apos;TOC&apos; and @altova:id = &apos;coTitle&apos; and ancestor::altova:level[1] is current() ]">
							<xsl:variable name="altova:current-marker-id" select="generate-id()"/>
							<altova:basic-link-container>
								<fo:basic-link text-decoration="no-underline" color="blue">
									<xsl:variable name="altova:target-document" select="ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
									<xsl:choose>
										<xsl:when test="$altova:source-document is $altova:target-document">
											<xsl:attribute name="internal-destination" select="generate-id()"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="show-destination" select="'replace'"/>
											<xsl:variable name="altova:relative-path" select="altova:calc-relative-path($altova:source-document/@url,$altova:target-document/@url)"/>
											<xsl:variable name="altova:url" select="concat(substring($altova:relative-path,1,string-length($altova:relative-path) - 3),'.pdf#dest=',generate-id())"/>
											<xsl:variable name="altova:escaped-url">
												<xsl:call-template name="altova:double-backslash">
													<xsl:with-param name="text" select="$altova:url"/>
													<xsl:with-param name="text-length" select="string-length($altova:url)"/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:attribute name="external-destination" select="concat('url(',$altova:escaped-url,')')"/>
										</xsl:otherwise>
									</xsl:choose>
									<fo:inline color="black" font-weight="bold">
										<xsl:choose>
											<xsl:when test="@altova:entrytext">
												<xsl:value-of select="@altova:entrytext"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:apply-templates mode="altova:extract-text-from-marker">
													<xsl:with-param name="altova:level-design-id" select="$altova:current-level-id"/>
													<xsl:with-param name="altova:marker-design-id" select="$altova:current-marker-id"/>
												</xsl:apply-templates>
											</xsl:otherwise>
										</xsl:choose>
									</fo:inline>
									<fo:leader leader-pattern="dots" leader-alignment="reference-area" color="gray"/>
									<xsl:if test="$altova:source-document is $altova:target-document">
										<fo:page-number-citation ref-id="{$altova:current-marker-id}" color="black"/>
									</xsl:if>
								</fo:basic-link>
							</altova:basic-link-container>
						</xsl:for-each>
					</fo:block>
					<xsl:for-each select="descendant::altova:level[ ancestor::altova:level[1] is current() ]">
						<xsl:variable name="altova:current-level-id" select="generate-id()"/>
						<fo:block color="#618f05" font-size="14pt" font-weight="bold" margin-right="100% - 100%" space-before="1.12em" space-after="1.12em" margin="0pt">
							<xsl:for-each select="descendant::altova:marker[ @altova:name = &apos;TOC&apos; and @altova:id = &apos;coSubtitle&apos; and ancestor::altova:level[1] is current() ]">
								<xsl:variable name="altova:current-marker-id" select="generate-id()"/>
								<altova:basic-link-container>
									<fo:basic-link text-decoration="no-underline" color="blue">
										<xsl:variable name="altova:target-document" select="ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
										<xsl:choose>
											<xsl:when test="$altova:source-document is $altova:target-document">
												<xsl:attribute name="internal-destination" select="generate-id()"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:attribute name="show-destination" select="'replace'"/>
												<xsl:variable name="altova:relative-path" select="altova:calc-relative-path($altova:source-document/@url,$altova:target-document/@url)"/>
												<xsl:variable name="altova:url" select="concat(substring($altova:relative-path,1,string-length($altova:relative-path) - 3),'.pdf#dest=',generate-id())"/>
												<xsl:variable name="altova:escaped-url">
													<xsl:call-template name="altova:double-backslash">
														<xsl:with-param name="text" select="$altova:url"/>
														<xsl:with-param name="text-length" select="string-length($altova:url)"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:attribute name="external-destination" select="concat('url(',$altova:escaped-url,')')"/>
											</xsl:otherwise>
										</xsl:choose>
										<fo:inline>
											<xsl:text>&#160; </xsl:text>
										</fo:inline>
										<fo:inline color="black" font-weight="normal">
											<xsl:choose>
												<xsl:when test="@altova:entrytext">
													<xsl:value-of select="@altova:entrytext"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:apply-templates mode="altova:extract-text-from-marker">
														<xsl:with-param name="altova:level-design-id" select="$altova:current-level-id"/>
														<xsl:with-param name="altova:marker-design-id" select="$altova:current-marker-id"/>
													</xsl:apply-templates>
												</xsl:otherwise>
											</xsl:choose>
										</fo:inline>
										<fo:leader leader-pattern="dots" leader-alignment="reference-area" color="gray"/>
										<xsl:if test="$altova:source-document is $altova:target-document">
											<fo:page-number-citation ref-id="{$altova:current-marker-id}" color="black"/>
										</xsl:if>
									</fo:basic-link>
								</altova:basic-link-container>
							</xsl:for-each>
						</fo:block>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
		</altova:toc>
	</xsl:template>
	<xsl:template match="altova:toc[ @altova:name = 'toc' ]" mode="altova:generate-bookmark-tree">
		<xsl:variable name="altova:source-document" select="ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
		<xsl:variable name="altova:current-level-id" select="generate-id( ancestor::altova:level[1] )"/>
		<xsl:variable name="sublevels">
			<xsl:for-each select="ancestor::*[self::altova:level | self::altova:main-document][1]">
				<xsl:for-each select="descendant::altova:level[ ancestor::*[self::altova:level | self::altova:main-document][1] is current() ]">
					<xsl:variable name="altova:current-level-id" select="generate-id()"/>
					<xsl:variable name="sublevels">
						<xsl:for-each select="descendant::altova:level[ ancestor::altova:level[1] is current() ]">
							<xsl:variable name="altova:current-level-id" select="generate-id()"/>
							<xsl:variable name="sublevels"/>
							<xsl:variable name="bookmark1">
								<xsl:for-each select="descendant::altova:marker[ @altova:name = 'TOC' and @altova:id = 'coSubtitle' and ancestor::altova:level[1] is current() ]">
									<xsl:variable name="altova:current-marker-id" select="generate-id()"/>
									<xsl:variable name="altova:target-document" select="ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
									<xsl:if test="$altova:source-document is $altova:target-document">
										<fo:bookmark internal-destination="{generate-id()}">
											<fo:bookmark-title>
												<xsl:text>&#160; </xsl:text>
												<xsl:choose>
													<xsl:when test="@altova:entrytext">
														<xsl:value-of select="@altova:entrytext"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:apply-templates mode="altova:extract-text-from-marker">
															<xsl:with-param name="altova:level-design-id" select="$altova:current-level-id"/>
															<xsl:with-param name="altova:marker-design-id" select="$altova:current-marker-id"/>
														</xsl:apply-templates>
													</xsl:otherwise>
												</xsl:choose>
											</fo:bookmark-title>
											<xsl:if test="position() = 1">
												<xsl:copy-of select="$sublevels"/>
											</xsl:if>
										</fo:bookmark>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="count($bookmark1/fo:bookmark) &gt; 0">
									<xsl:copy-of select="$bookmark1"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:copy-of select="$sublevels"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="bookmark1">
						<xsl:for-each select="descendant::altova:marker[ @altova:name = 'TOC' and @altova:id = 'coTitle' and ancestor::altova:level[1] is current() ]">
							<xsl:variable name="altova:current-marker-id" select="generate-id()"/>
							<xsl:variable name="altova:target-document" select="ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
							<xsl:if test="$altova:source-document is $altova:target-document">
								<fo:bookmark internal-destination="{generate-id()}">
									<fo:bookmark-title>
										<xsl:choose>
											<xsl:when test="@altova:entrytext">
												<xsl:value-of select="@altova:entrytext"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:apply-templates mode="altova:extract-text-from-marker">
													<xsl:with-param name="altova:level-design-id" select="$altova:current-level-id"/>
													<xsl:with-param name="altova:marker-design-id" select="$altova:current-marker-id"/>
												</xsl:apply-templates>
											</xsl:otherwise>
										</xsl:choose>
									</fo:bookmark-title>
									<xsl:if test="position() = 1">
										<xsl:copy-of select="$sublevels"/>
									</xsl:if>
								</fo:bookmark>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="count($bookmark1/fo:bookmark) &gt; 0">
							<xsl:copy-of select="$bookmark1"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:copy-of select="$sublevels"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</xsl:for-each>
		</xsl:variable>
		<xsl:copy-of select="$sublevels"/>
	</xsl:template>
	<xsl:template match="COURSE-LIST">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:for-each select="COURSE[sps:getSubtitleNumber( TITLE,SUBTITLE, @id ) = &quot;i&quot;]">
			<xsl:sort select="TITLE" data-type="text" order="ascending"/>
			<xsl:sort select="SUBTITLE" data-type="text" order="ascending"/>
			<xsl:variable name="coTitle" select="TITLE"/>
			<altova:level>
				<altova:marker altova:name="TOC" altova:id="coTitle">
					<xsl:attribute name="altova:entrytext">
						<xsl:value-of select="concat(sps:getTitleNumber( TITLE ), '. ', TITLE)"/>
					</xsl:attribute>
				</altova:marker>
				<xsl:choose>
					<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
						<fo:block background-image="url(file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/25%20Aug/Images/greenGradient.png)" background-size="cover" border-top-left-radius="9pt" border-top-right-radius="9pt" box-shadow="0.01in 0.01in 0.02in #000" color="white" font-size="18pt" line-height="150%" margin="0" margin-top="2pt" padding-bottom="2pt" padding-left="15pt" padding-right="inherit" padding-top="0pt" width="100%" margin-right="0 + 100% - 100%" space-before="0" space-after="0">
							<xsl:choose>
								<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
									<fo:block background-image="url(file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/25%20Aug/Images/greenGradient.png)" background-repeat="repeat" color="white" font-size="18pt" line-height="150%" margin-bottom="0pt" margin-left="0pt" margin-right="0pt + 100% - 100%" margin-top="0pt" padding-bottom="2pt" padding-left="15pt" padding-right="inherit" padding-top="2pt" text-align="left" display-align="center" font-weight="bold" space-before="0.75em" space-after="0.75em" margin="0pt">
										<altova:inline-container-substitute text-align="left">
											<xsl:value-of select="sps:getTitleNumber( TITLE )"/>
										</altova:inline-container-substitute>
										<fo:inline>
											<xsl:text>. </xsl:text>
										</fo:inline>
										<xsl:for-each select="TITLE">
											<altova:inline-container-substitute padding="0pt" text-align="left">
												<xsl:apply-templates/>
											</altova:inline-container-substitute>
										</xsl:for-each>
									</fo:block>
								</xsl:when>
								<xsl:otherwise>
									<altova:inline-container-substitute text-align="left">
										<xsl:value-of select="sps:getTitleNumber( TITLE )"/>
									</altova:inline-container-substitute>
									<fo:inline>
										<xsl:text>. </xsl:text>
									</fo:inline>
									<xsl:for-each select="TITLE">
										<altova:inline-container-substitute padding="0pt" text-align="left">
											<xsl:apply-templates/>
										</altova:inline-container-substitute>
									</xsl:for-each>
								</xsl:otherwise>
							</xsl:choose>
						</fo:block>
					</xsl:when>
					<xsl:otherwise>
						<xsl:choose>
							<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
								<fo:block background-image="url(file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/25%20Aug/Images/greenGradient.png)" background-repeat="repeat" color="white" font-size="18pt" line-height="150%" margin-bottom="0pt" margin-left="0pt" margin-right="0pt + 100% - 100%" margin-top="0pt" padding-bottom="2pt" padding-left="15pt" padding-right="inherit" padding-top="2pt" text-align="left" display-align="center" font-weight="bold" space-before="0.75em" space-after="0.75em" margin="0pt">
									<altova:inline-container-substitute text-align="left">
										<xsl:value-of select="sps:getTitleNumber( TITLE )"/>
									</altova:inline-container-substitute>
									<fo:inline>
										<xsl:text>. </xsl:text>
									</fo:inline>
									<xsl:for-each select="TITLE">
										<altova:inline-container-substitute padding="0pt" text-align="left">
											<xsl:apply-templates/>
										</altova:inline-container-substitute>
									</xsl:for-each>
								</fo:block>
							</xsl:when>
							<xsl:otherwise>
								<altova:inline-container-substitute text-align="left">
									<xsl:value-of select="sps:getTitleNumber( TITLE )"/>
								</altova:inline-container-substitute>
								<fo:inline>
									<xsl:text>. </xsl:text>
								</fo:inline>
								<xsl:for-each select="TITLE">
									<altova:inline-container-substitute padding="0pt" text-align="left">
										<xsl:apply-templates/>
									</altova:inline-container-substitute>
								</xsl:for-each>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
				<xsl:choose>
					<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
						<fo:block background-color="white" border="1pt solid #A9A9A9" border-bottom-left-radius="12pt" border-bottom-right-radius="12pt" box-shadow="0.01in 0.01in 0.02in #000" font-size="0.13in" line-height="171%" margin-bottom="10pt" margin-right="5pt + 100% - 100%" padding-bottom="2pt" padding-left="13pt" padding-right="inherit" padding-top="0pt" width="100%" space-before="0" space-after="0" margin="0pt">
							<xsl:for-each select="$XML">
								<xsl:for-each select="COURSE-LIST">
									<xsl:for-each select="COURSE[TITLE=$coTitle]">
										<xsl:sort select="TITLE" data-type="text" order="ascending"/>
										<xsl:sort select="SUBTITLE" data-type="text" order="ascending"/>
										<xsl:sort select="@id" data-type="number" order="ascending"/>
										<altova:level>
											<altova:marker altova:name="TOC" altova:id="coSubtitle">
												<xsl:attribute name="altova:entrytext">
													<xsl:value-of select="concat(sps:getSubtitleNumber( TITLE, SUBTITLE, @id ), '. ', SUBTITLE)"/>
												</xsl:attribute>
											</altova:marker>
											<xsl:variable name="altova:table">
												<fo:table border="0pt" width="100%" table-layout="fixed" border-spacing="2pt">
													<fo:table-column column-width="6.540in"/>
													<fo:table-column column-width="0.700in"/>
													<xsl:variable name="altova:CurrContextGrid_3" select="."/>
													<xsl:variable name="altova:ColumnData"/>
													<fo:table-body border="0pt" start-indent="0pt">
														<fo:table-row border="0pt" height="auto">
															<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" border-left="0pt" border-right="0pt" border-top="0pt" font-family="Verdana" font-size="10pt" padding="0pt" border="solid 1pt gray" display-align="after">
																<fo:block-container overflow="hidden">
																	<fo:block text-align="left">
																		<fo:block border-top-color="#7cb00d" border-top-width="1pt" font-size="16pt" font-weight="bold" margin-top="0pt" padding-top="0pt" margin-right="100% - 100%" space-before="0.83em" space-after="0.83em" margin="0pt">
																			<fo:inline>
																				<xsl:text>(</xsl:text>
																			</fo:inline>
																			<xsl:value-of select="sps:getSubtitleNumber( TITLE, SUBTITLE,@id)"/>
																			<fo:inline>
																				<xsl:text>) </xsl:text>
																			</fo:inline>
																			<xsl:for-each select="SUBTITLE">
																				<altova:inline-container-substitute>
																					<xsl:apply-templates/>
																				</altova:inline-container-substitute>
																			</xsl:for-each>
																		</fo:block>
																	</fo:block>
																</fo:block-container>
															</fo:table-cell>
															<fo:table-cell border="0pt" font-family="Verdana" font-size="10pt" padding="0pt" display-align="before">
																<fo:block-container overflow="hidden">
																	<fo:block text-align="right">
																		<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/comelio_dozenten.png&apos;"/>
																		<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
																			<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
																				<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
																					<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:sequence select="(0, 0)"/>
																				</xsl:otherwise>
																			</xsl:choose>
																			<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
																		</xsl:variable>
																		<fo:external-graphic direction="rtl" margin-right="0pt" text-align="right" content-height="0.65in" scaling="non-uniform" content-width="0.71in">
																			<xsl:attribute name="src">
																				<xsl:text>url(</xsl:text>
																				<xsl:call-template name="altova:double-backslash">
																					<xsl:with-param name="text">
																						<xsl:value-of select="string(&apos;../Images/comelio_dozenten.png&apos;)"/>
																					</xsl:with-param>
																					<xsl:with-param name="text-length">
																						<xsl:value-of select="string-length(string(&apos;../Images/comelio_dozenten.png&apos;))"/>
																					</xsl:with-param>
																				</xsl:call-template>
																				<xsl:text>)</xsl:text>
																			</xsl:attribute>
																		</fo:external-graphic>
																		<fo:inline>
																			<xsl:text>&#x200B;</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:block-container>
															</fo:table-cell>
														</fo:table-row>
													</fo:table-body>
												</fo:table>
											</xsl:variable>
											<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
											<xsl:variable name="altova:table">
												<fo:table height="auto" min-width="0pt" width="auto" table-layout="fixed" border-spacing="2">
													<fo:table-column column-width="auto"/>
													<fo:table-column column-width="auto"/>
													<xsl:variable name="altova:CurrContextGrid_4" select="."/>
													<xsl:variable name="altova:ColumnData"/>
													<fo:table-body height="auto" width="auto" start-indent="0pt">
														<fo:table-row height="auto" width="auto">
															<fo:table-cell border-right-color="gray" border-right-style="dotted" border-right-width="thin" font-family="Verdana" font-size="10pt" padding="2" display-align="before">
																<fo:block-container overflow="hidden">
																	<fo:block text-align="left">
																		<xsl:variable name="altova:table">
																			<fo:table border="0.00in" width="100%" table-layout="fixed" border-spacing="2pt">
																				<fo:table-column column-width="auto"/>
																				<xsl:variable name="altova:CurrContextGrid_5" select="."/>
																				<xsl:variable name="altova:ColumnData"/>
																				<fo:table-body start-indent="0pt">
																					<fo:table-row>
																						<fo:table-cell border="0.00in" font-family="Verdana" font-size="10pt" line-height="111%" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="before">
																							<fo:block-container overflow="hidden">
																								<fo:block text-align="left">
																									<fo:block color="#618f05" font-size="14pt" font-weight="bold" margin-top="0pt" padding-top="0pt" margin-right="100% - 100%" space-before="1.12em" space-after="1.12em" margin="0pt">
																										<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/Focus.png&apos;"/>
																										<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
																											<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
																												<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
																													<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
																												</xsl:when>
																												<xsl:otherwise>
																													<xsl:sequence select="(0, 0)"/>
																												</xsl:otherwise>
																											</xsl:choose>
																											<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
																										</xsl:variable>
																										<fo:external-graphic>
																											<xsl:if test="$altova:seqWidthHeight[2] != 0">
																												<xsl:attribute name="scaling" select="'non-uniform'"/>
																												<xsl:variable name="sContent-height">
																													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																														<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[2], &apos;px&apos;)"/>
																													</xsl:call-template>
																												</xsl:variable>
																												<xsl:if test="$sContent-height != ''">
																													<xsl:attribute name="content-height">
																														<xsl:value-of select="$sContent-height"/>
																													</xsl:attribute>
																												</xsl:if>
																											</xsl:if>
																											<xsl:if test="$altova:seqWidthHeight[1] != 0">
																												<xsl:attribute name="scaling" select="'non-uniform'"/>
																												<xsl:variable name="sContent-width">
																													<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																														<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[1], &apos;px&apos;)"/>
																													</xsl:call-template>
																												</xsl:variable>
																												<xsl:if test="$sContent-width != ''">
																													<xsl:attribute name="content-width">
																														<xsl:value-of select="$sContent-width"/>
																													</xsl:attribute>
																												</xsl:if>
																											</xsl:if>
																											<xsl:attribute name="src">
																												<xsl:text>url(</xsl:text>
																												<xsl:call-template name="altova:double-backslash">
																													<xsl:with-param name="text">
																														<xsl:value-of select="string(&apos;../Images/Focus.png&apos;)"/>
																													</xsl:with-param>
																													<xsl:with-param name="text-length">
																														<xsl:value-of select="string-length(string(&apos;../Images/Focus.png&apos;))"/>
																													</xsl:with-param>
																												</xsl:call-template>
																												<xsl:text>)</xsl:text>
																											</xsl:attribute>
																										</fo:external-graphic>
																										<fo:inline>
																											<xsl:text>&#x200B;</xsl:text>
																										</fo:inline>
																										<xsl:choose>
																											<xsl:when test="$language = &apos;en&apos;">
																												<fo:inline>
																													<xsl:text>Overview</xsl:text>
																												</fo:inline>
																											</xsl:when>
																											<xsl:when test="$language = &apos;de&apos;">
																												<fo:inline>
																													<xsl:text>Übersicht</xsl:text>
																												</fo:inline>
																											</xsl:when>
																										</xsl:choose>
																									</fo:block>
																									<xsl:variable name="altova:table">
																										<fo:table line-height="111%" margin="0pt" padding="0pt" width="auto" table-layout="fixed" border-spacing="2pt">
																											<fo:table-column column-width="auto"/>
																											<fo:table-column column-width="auto"/>
																											<xsl:variable name="altova:CurrContextGrid_6" select="."/>
																											<xsl:variable name="altova:ColumnData"/>
																											<fo:table-body start-indent="0pt">
																												<fo:table-row height="auto">
																													<fo:table-cell font-family="Verdana" font-size="10pt" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" font-weight="bold" line-height="12pt" margin-top="0pt" padding-right="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 2 and Language = $language]/Value"/>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																													<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<xsl:for-each select="@id">
																																		<fo:inline>
																																			<xsl:value-of select="string(.)"/>
																																		</fo:inline>
																																	</xsl:for-each>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																												</fo:table-row>
																												<fo:table-row height="auto">
																													<fo:table-cell font-family="Verdana" font-size="10pt" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" font-weight="bold" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 13 and Language = $language]/Value"/>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																													<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<xsl:for-each select="@language">
																																		<fo:inline>
																																			<xsl:value-of select="string(.)"/>
																																		</fo:inline>
																																	</xsl:for-each>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																												</fo:table-row>
																												<fo:table-row height="auto">
																													<fo:table-cell font-family="Verdana" font-size="10pt" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<altova:inline-container-substitute font-weight="bold">
																																		<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 12 and Language = $language]/Value"/>
																																	</altova:inline-container-substitute>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																													<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<xsl:for-each select="@duration">
																																		<fo:inline>
																																			<xsl:value-of select="string(.)"/>
																																		</fo:inline>
																																	</xsl:for-each>
																																	<fo:inline>
																																		<xsl:text>&#160;</xsl:text>
																																	</fo:inline>
																																	<xsl:choose>
																																		<xsl:when test="number(@duration) != 1">
																																			<xsl:choose>
																																				<xsl:when test="$language = &apos;en&apos;">
																																					<fo:inline>
																																						<xsl:text>Days</xsl:text>
																																					</fo:inline>
																																				</xsl:when>
																																				<xsl:when test="$language = &apos;de&apos;">
																																					<fo:inline>
																																						<xsl:text>Tage</xsl:text>
																																					</fo:inline>
																																				</xsl:when>
																																			</xsl:choose>
																																		</xsl:when>
																																		<xsl:otherwise>
																																			<xsl:choose>
																																				<xsl:when test="$language = &apos;en&apos;">
																																					<fo:inline>
																																						<xsl:text>Day</xsl:text>
																																					</fo:inline>
																																				</xsl:when>
																																				<xsl:when test="$language = &apos;de&apos;">
																																					<fo:inline>
																																						<xsl:text>Tag</xsl:text>
																																					</fo:inline>
																																				</xsl:when>
																																			</xsl:choose>
																																		</xsl:otherwise>
																																	</xsl:choose>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																												</fo:table-row>
																												<fo:table-row height="auto">
																													<fo:table-cell font-family="Verdana" font-size="10pt" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" font-weight="bold" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 8 and Language = $language]/Value"/>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																													<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<xsl:for-each select="@deliveryType">
																																		<fo:inline>
																																			<xsl:value-of select="string(.)"/>
																																		</fo:inline>
																																	</xsl:for-each>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																												</fo:table-row>
																												<fo:table-row>
																													<fo:table-cell font-family="Verdana" font-size="10pt" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" font-weight="bold" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 3 and Language = $language]/Value"/>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																													<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<xsl:for-each select="TARGET_GROUP">
																																		<altova:inline-container-substitute>
																																			<xsl:apply-templates/>
																																		</altova:inline-container-substitute>
																																	</xsl:for-each>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																												</fo:table-row>
																												<fo:table-row>
																													<fo:table-cell font-family="Verdana" font-size="10pt" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" font-weight="bold" line-height="12pt" margin-top="0pt" padding-right="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 9 and Language = $language]/Value"/>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																													<fo:table-cell font-family="Verdana" font-size="10pt" height="auto" line-height="111%" padding="2pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-left="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<xsl:for-each select="PREREQUISITE">
																																		<altova:inline-container-substitute>
																																			<xsl:apply-templates/>
																																		</altova:inline-container-substitute>
																																	</xsl:for-each>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																												</fo:table-row>
																												<fo:table-row>
																													<fo:table-cell font-family="Verdana" font-size="10pt" height="auto" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" font-weight="bold" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 10 and Language = $language]/Value"/>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																													<fo:table-cell font-family="Verdana" font-size="10pt" height="auto" line-height="111%" padding="2pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<xsl:for-each select="COURSE_METHOD">
																																		<altova:inline-container-substitute>
																																			<xsl:apply-templates/>
																																		</altova:inline-container-substitute>
																																	</xsl:for-each>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																												</fo:table-row>
																												<fo:table-row>
																													<fo:table-cell font-family="Verdana" font-size="10pt" height="auto" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" font-weight="bold" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 11 and Language = $language]/Value"/>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																													<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
																														<fo:block-container overflow="hidden">
																															<fo:block text-align="left">
																																<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																	<xsl:for-each select="COURSE_LEVEL">
																																		<altova:inline-container-substitute>
																																			<xsl:apply-templates/>
																																		</altova:inline-container-substitute>
																																	</xsl:for-each>
																																</fo:block>
																															</fo:block>
																														</fo:block-container>
																													</fo:table-cell>
																												</fo:table-row>
																											</fo:table-body>
																										</fo:table>
																									</xsl:variable>
																									<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
																								</fo:block>
																							</fo:block-container>
																						</fo:table-cell>
																					</fo:table-row>
																				</fo:table-body>
																			</fo:table>
																		</xsl:variable>
																		<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
																	</fo:block>
																</fo:block-container>
															</fo:table-cell>
															<fo:table-cell empty-cells="hide" font-family="Verdana" font-size="10pt" height="auto" min-width="0pt" padding="2" display-align="before">
																<fo:block-container overflow="hidden">
																	<fo:block text-align="left">
																		<xsl:if test="fn:count(fn:distinct-values(DATE-LIST/DATE[@id &gt; 0]/@id) )&gt; 0">
																			<fo:block color="#618f05" font-size="14pt" font-weight="bold" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" space-before="1.12em" space-after="1.12em" margin="0pt">
																				<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/Dates.png&apos;"/>
																				<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
																					<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
																						<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
																							<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:sequence select="(0, 0)"/>
																						</xsl:otherwise>
																					</xsl:choose>
																					<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
																				</xsl:variable>
																				<fo:external-graphic>
																					<xsl:if test="$altova:seqWidthHeight[2] != 0">
																						<xsl:attribute name="scaling" select="'non-uniform'"/>
																						<xsl:variable name="sContent-height">
																							<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																								<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[2], &apos;px&apos;)"/>
																							</xsl:call-template>
																						</xsl:variable>
																						<xsl:if test="$sContent-height != ''">
																							<xsl:attribute name="content-height">
																								<xsl:value-of select="$sContent-height"/>
																							</xsl:attribute>
																						</xsl:if>
																					</xsl:if>
																					<xsl:if test="$altova:seqWidthHeight[1] != 0">
																						<xsl:attribute name="scaling" select="'non-uniform'"/>
																						<xsl:variable name="sContent-width">
																							<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																								<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[1], &apos;px&apos;)"/>
																							</xsl:call-template>
																						</xsl:variable>
																						<xsl:if test="$sContent-width != ''">
																							<xsl:attribute name="content-width">
																								<xsl:value-of select="$sContent-width"/>
																							</xsl:attribute>
																						</xsl:if>
																					</xsl:if>
																					<xsl:attribute name="src">
																						<xsl:text>url(</xsl:text>
																						<xsl:call-template name="altova:double-backslash">
																							<xsl:with-param name="text">
																								<xsl:value-of select="string(&apos;../Images/Dates.png&apos;)"/>
																							</xsl:with-param>
																							<xsl:with-param name="text-length">
																								<xsl:value-of select="string-length(string(&apos;../Images/Dates.png&apos;))"/>
																							</xsl:with-param>
																						</xsl:call-template>
																						<xsl:text>)</xsl:text>
																					</xsl:attribute>
																				</fo:external-graphic>
																				<fo:inline>
																					<xsl:text>&#x200B;</xsl:text>
																				</fo:inline>
																				<xsl:choose>
																					<xsl:when test="$language = &apos;en&apos;">
																						<fo:inline>
																							<xsl:text>Course Dates</xsl:text>
																						</fo:inline>
																					</xsl:when>
																					<xsl:when test="$language = &apos;de&apos;">
																						<fo:inline>
																							<xsl:text>Termine</xsl:text>
																						</fo:inline>
																					</xsl:when>
																				</xsl:choose>
																			</fo:block>
																			<xsl:call-template name="OutputCalendar">
																				<xsl:with-param name="pDateList" select="DATE-LIST"/>
																				<xsl:with-param name="language" select="$language"/>
																				<xsl:with-param name="outputType" select="$SV_OutputFormat "/>
																				<xsl:with-param name="validCities" select='string-join(fn:distinct-values($XML4/LOCATION-LIST/COUNTRY-LIST/COUNTRY/CITY-LIST/CITY[GROUP-LIST/GROUP_ID = fn:tokenize($locationGroups, ",")]/fn:string(NAME)), ",")'/>
																			</xsl:call-template>
																			<fo:block font-size="0.13in" line-height="171%" margin-top="0pt" padding-top="0pt" text-align="right" width="100%" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
																				<fo:block font-size="10pt" line-height="normal" margin="0pt" margin-top="0pt" padding-top="0pt" text-align="right" width="100%" margin-right="0pt + 100% - 100%">
																					<xsl:choose>
																						<xsl:when test="$language = &apos;en&apos;">
																							<fo:inline>
																								<xsl:text>Prices plus local taxes.</xsl:text>
																							</fo:inline>
																						</xsl:when>
																						<xsl:when test="$language = &apos;de&apos;">
																							<fo:inline>
																								<xsl:text>Preise zzgl. lokale Steuern.</xsl:text>
																							</fo:inline>
																						</xsl:when>
																					</xsl:choose>
																				</fo:block>
																			</fo:block>
																		</xsl:if>
																	</fo:block>
																</fo:block-container>
															</fo:table-cell>
														</fo:table-row>
													</fo:table-body>
												</fo:table>
											</xsl:variable>
											<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
											<fo:block font-size="0.13in" keep-together.within-page="always" keep-together.within-column="always" line-height="171%" margin-right="5pt + 100% - 100%" margin-top="0pt" padding-top="0pt" space-before="0" space-after="0" margin="0pt">
												<fo:block color="#618f05" font-size="14pt" font-weight="bold" keep-together.within-page="always" keep-together.within-column="always" margin-top="0pt" padding-top="0pt" margin-right="100% - 100%" space-before="1.12em" space-after="1.12em" margin="0pt">
													<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/Overview.png&apos;"/>
													<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
														<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
															<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
																<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:sequence select="(0, 0)"/>
															</xsl:otherwise>
														</xsl:choose>
														<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
													</xsl:variable>
													<fo:external-graphic>
														<xsl:if test="$altova:seqWidthHeight[2] != 0">
															<xsl:attribute name="scaling" select="'non-uniform'"/>
															<xsl:variable name="sContent-height">
																<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																	<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[2], &apos;px&apos;)"/>
																</xsl:call-template>
															</xsl:variable>
															<xsl:if test="$sContent-height != ''">
																<xsl:attribute name="content-height">
																	<xsl:value-of select="$sContent-height"/>
																</xsl:attribute>
															</xsl:if>
														</xsl:if>
														<xsl:if test="$altova:seqWidthHeight[1] != 0">
															<xsl:attribute name="scaling" select="'non-uniform'"/>
															<xsl:variable name="sContent-width">
																<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																	<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[1], &apos;px&apos;)"/>
																</xsl:call-template>
															</xsl:variable>
															<xsl:if test="$sContent-width != ''">
																<xsl:attribute name="content-width">
																	<xsl:value-of select="$sContent-width"/>
																</xsl:attribute>
															</xsl:if>
														</xsl:if>
														<xsl:attribute name="src">
															<xsl:text>url(</xsl:text>
															<xsl:call-template name="altova:double-backslash">
																<xsl:with-param name="text">
																	<xsl:value-of select="string(&apos;../Images/Overview.png&apos;)"/>
																</xsl:with-param>
																<xsl:with-param name="text-length">
																	<xsl:value-of select="string-length(string(&apos;../Images/Overview.png&apos;))"/>
																</xsl:with-param>
															</xsl:call-template>
															<xsl:text>)</xsl:text>
														</xsl:attribute>
													</fo:external-graphic>
													<fo:inline>
														<xsl:text>&#x200B;</xsl:text>
													</fo:inline>
													<xsl:choose>
														<xsl:when test="$language = &apos;en&apos;">
															<fo:inline>
																<xsl:text>Course Description</xsl:text>
															</fo:inline>
														</xsl:when>
														<xsl:when test="$language = &apos;de&apos;">
															<fo:inline>
																<xsl:text>Kursbeschreibung</xsl:text>
															</fo:inline>
														</xsl:when>
													</xsl:choose>
												</fo:block>
												<fo:block font-size="10pt" keep-together.within-page="always" keep-together.within-column="always" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
													<xsl:for-each select="OBJECTIVES">
														<altova:inline-container-substitute>
															<xsl:apply-templates/>
														</altova:inline-container-substitute>
													</xsl:for-each>
												</fo:block>
											</fo:block>
											<xsl:apply-templates select="Module-List"/>
										</altova:level>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</fo:block>
					</xsl:when>
					<xsl:otherwise>
						<xsl:for-each select="$XML">
							<xsl:for-each select="COURSE-LIST">
								<xsl:for-each select="COURSE[TITLE=$coTitle]">
									<xsl:sort select="TITLE" data-type="text" order="ascending"/>
									<xsl:sort select="SUBTITLE" data-type="text" order="ascending"/>
									<xsl:sort select="@id" data-type="number" order="ascending"/>
									<altova:level>
										<altova:marker altova:name="TOC" altova:id="coSubtitle">
											<xsl:attribute name="altova:entrytext">
												<xsl:value-of select="concat(sps:getSubtitleNumber( TITLE, SUBTITLE, @id ), '. ', SUBTITLE)"/>
											</xsl:attribute>
										</altova:marker>
										<xsl:variable name="altova:table">
											<fo:table border="0pt" width="100%" table-layout="fixed" border-spacing="2pt">
												<fo:table-column column-width="6.540in"/>
												<fo:table-column column-width="0.700in"/>
												<xsl:variable name="altova:CurrContextGrid_3" select="."/>
												<xsl:variable name="altova:ColumnData"/>
												<fo:table-body border="0pt" start-indent="0pt">
													<fo:table-row border="0pt" height="auto">
														<fo:table-cell border-bottom-color="black" border-bottom-style="dotted" border-bottom-width="thin" border-left="0pt" border-right="0pt" border-top="0pt" font-family="Verdana" font-size="10pt" padding="0pt" border="solid 1pt gray" display-align="after">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<fo:block border-top-color="#7cb00d" border-top-width="1pt" font-size="16pt" font-weight="bold" margin-top="0pt" padding-top="0pt" margin-right="100% - 100%" space-before="0.83em" space-after="0.83em" margin="0pt">
																		<fo:inline>
																			<xsl:text>(</xsl:text>
																		</fo:inline>
																		<xsl:value-of select="sps:getSubtitleNumber( TITLE, SUBTITLE,@id)"/>
																		<fo:inline>
																			<xsl:text>) </xsl:text>
																		</fo:inline>
																		<xsl:for-each select="SUBTITLE">
																			<altova:inline-container-substitute>
																				<xsl:apply-templates/>
																			</altova:inline-container-substitute>
																		</xsl:for-each>
																	</fo:block>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell border="0pt" font-family="Verdana" font-size="10pt" padding="0pt" display-align="before">
															<fo:block-container overflow="hidden">
																<fo:block text-align="right">
																	<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/comelio_dozenten.png&apos;"/>
																	<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
																		<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
																			<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
																				<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:sequence select="(0, 0)"/>
																			</xsl:otherwise>
																		</xsl:choose>
																		<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
																	</xsl:variable>
																	<fo:external-graphic direction="rtl" margin-right="0pt" text-align="right" content-height="0.65in" scaling="non-uniform" content-width="0.71in">
																		<xsl:attribute name="src">
																			<xsl:text>url(</xsl:text>
																			<xsl:call-template name="altova:double-backslash">
																				<xsl:with-param name="text">
																					<xsl:value-of select="string(&apos;../Images/comelio_dozenten.png&apos;)"/>
																				</xsl:with-param>
																				<xsl:with-param name="text-length">
																					<xsl:value-of select="string-length(string(&apos;../Images/comelio_dozenten.png&apos;))"/>
																				</xsl:with-param>
																			</xsl:call-template>
																			<xsl:text>)</xsl:text>
																		</xsl:attribute>
																	</fo:external-graphic>
																	<fo:inline>
																		<xsl:text>&#x200B;</xsl:text>
																	</fo:inline>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
												</fo:table-body>
											</fo:table>
										</xsl:variable>
										<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
										<xsl:variable name="altova:table">
											<fo:table height="auto" min-width="0pt" width="auto" table-layout="fixed" border-spacing="2">
												<fo:table-column column-width="auto"/>
												<fo:table-column column-width="auto"/>
												<xsl:variable name="altova:CurrContextGrid_4" select="."/>
												<xsl:variable name="altova:ColumnData"/>
												<fo:table-body height="auto" width="auto" start-indent="0pt">
													<fo:table-row height="auto" width="auto">
														<fo:table-cell border-right-color="gray" border-right-style="dotted" border-right-width="thin" font-family="Verdana" font-size="10pt" padding="2" display-align="before">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<xsl:variable name="altova:table">
																		<fo:table border="0.00in" width="100%" table-layout="fixed" border-spacing="2pt">
																			<fo:table-column column-width="auto"/>
																			<xsl:variable name="altova:CurrContextGrid_5" select="."/>
																			<xsl:variable name="altova:ColumnData"/>
																			<fo:table-body start-indent="0pt">
																				<fo:table-row>
																					<fo:table-cell border="0.00in" font-family="Verdana" font-size="10pt" line-height="111%" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="before">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<fo:block color="#618f05" font-size="14pt" font-weight="bold" margin-top="0pt" padding-top="0pt" margin-right="100% - 100%" space-before="1.12em" space-after="1.12em" margin="0pt">
																									<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/Focus.png&apos;"/>
																									<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
																										<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
																											<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
																												<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
																											</xsl:when>
																											<xsl:otherwise>
																												<xsl:sequence select="(0, 0)"/>
																											</xsl:otherwise>
																										</xsl:choose>
																										<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
																									</xsl:variable>
																									<fo:external-graphic>
																										<xsl:if test="$altova:seqWidthHeight[2] != 0">
																											<xsl:attribute name="scaling" select="'non-uniform'"/>
																											<xsl:variable name="sContent-height">
																												<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																													<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[2], &apos;px&apos;)"/>
																												</xsl:call-template>
																											</xsl:variable>
																											<xsl:if test="$sContent-height != ''">
																												<xsl:attribute name="content-height">
																													<xsl:value-of select="$sContent-height"/>
																												</xsl:attribute>
																											</xsl:if>
																										</xsl:if>
																										<xsl:if test="$altova:seqWidthHeight[1] != 0">
																											<xsl:attribute name="scaling" select="'non-uniform'"/>
																											<xsl:variable name="sContent-width">
																												<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																													<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[1], &apos;px&apos;)"/>
																												</xsl:call-template>
																											</xsl:variable>
																											<xsl:if test="$sContent-width != ''">
																												<xsl:attribute name="content-width">
																													<xsl:value-of select="$sContent-width"/>
																												</xsl:attribute>
																											</xsl:if>
																										</xsl:if>
																										<xsl:attribute name="src">
																											<xsl:text>url(</xsl:text>
																											<xsl:call-template name="altova:double-backslash">
																												<xsl:with-param name="text">
																													<xsl:value-of select="string(&apos;../Images/Focus.png&apos;)"/>
																												</xsl:with-param>
																												<xsl:with-param name="text-length">
																													<xsl:value-of select="string-length(string(&apos;../Images/Focus.png&apos;))"/>
																												</xsl:with-param>
																											</xsl:call-template>
																											<xsl:text>)</xsl:text>
																										</xsl:attribute>
																									</fo:external-graphic>
																									<fo:inline>
																										<xsl:text>&#x200B;</xsl:text>
																									</fo:inline>
																									<xsl:choose>
																										<xsl:when test="$language = &apos;en&apos;">
																											<fo:inline>
																												<xsl:text>Overview</xsl:text>
																											</fo:inline>
																										</xsl:when>
																										<xsl:when test="$language = &apos;de&apos;">
																											<fo:inline>
																												<xsl:text>Übersicht</xsl:text>
																											</fo:inline>
																										</xsl:when>
																									</xsl:choose>
																								</fo:block>
																								<xsl:variable name="altova:table">
																									<fo:table line-height="111%" margin="0pt" padding="0pt" width="auto" table-layout="fixed" border-spacing="2pt">
																										<fo:table-column column-width="auto"/>
																										<fo:table-column column-width="auto"/>
																										<xsl:variable name="altova:CurrContextGrid_6" select="."/>
																										<xsl:variable name="altova:ColumnData"/>
																										<fo:table-body start-indent="0pt">
																											<fo:table-row height="auto">
																												<fo:table-cell font-family="Verdana" font-size="10pt" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" font-weight="bold" line-height="12pt" margin-top="0pt" padding-right="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 2 and Language = $language]/Value"/>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																												<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<xsl:for-each select="@id">
																																	<fo:inline>
																																		<xsl:value-of select="string(.)"/>
																																	</fo:inline>
																																</xsl:for-each>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																											</fo:table-row>
																											<fo:table-row height="auto">
																												<fo:table-cell font-family="Verdana" font-size="10pt" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" font-weight="bold" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 13 and Language = $language]/Value"/>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																												<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<xsl:for-each select="@language">
																																	<fo:inline>
																																		<xsl:value-of select="string(.)"/>
																																	</fo:inline>
																																</xsl:for-each>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																											</fo:table-row>
																											<fo:table-row height="auto">
																												<fo:table-cell font-family="Verdana" font-size="10pt" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<altova:inline-container-substitute font-weight="bold">
																																	<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 12 and Language = $language]/Value"/>
																																</altova:inline-container-substitute>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																												<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<xsl:for-each select="@duration">
																																	<fo:inline>
																																		<xsl:value-of select="string(.)"/>
																																	</fo:inline>
																																</xsl:for-each>
																																<fo:inline>
																																	<xsl:text>&#160;</xsl:text>
																																</fo:inline>
																																<xsl:choose>
																																	<xsl:when test="number(@duration) != 1">
																																		<xsl:choose>
																																			<xsl:when test="$language = &apos;en&apos;">
																																				<fo:inline>
																																					<xsl:text>Days</xsl:text>
																																				</fo:inline>
																																			</xsl:when>
																																			<xsl:when test="$language = &apos;de&apos;">
																																				<fo:inline>
																																					<xsl:text>Tage</xsl:text>
																																				</fo:inline>
																																			</xsl:when>
																																		</xsl:choose>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<xsl:choose>
																																			<xsl:when test="$language = &apos;en&apos;">
																																				<fo:inline>
																																					<xsl:text>Day</xsl:text>
																																				</fo:inline>
																																			</xsl:when>
																																			<xsl:when test="$language = &apos;de&apos;">
																																				<fo:inline>
																																					<xsl:text>Tag</xsl:text>
																																				</fo:inline>
																																			</xsl:when>
																																		</xsl:choose>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																											</fo:table-row>
																											<fo:table-row height="auto">
																												<fo:table-cell font-family="Verdana" font-size="10pt" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" font-weight="bold" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 8 and Language = $language]/Value"/>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																												<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<xsl:for-each select="@deliveryType">
																																	<fo:inline>
																																		<xsl:value-of select="string(.)"/>
																																	</fo:inline>
																																</xsl:for-each>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																											</fo:table-row>
																											<fo:table-row>
																												<fo:table-cell font-family="Verdana" font-size="10pt" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" font-weight="bold" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 3 and Language = $language]/Value"/>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																												<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<xsl:for-each select="TARGET_GROUP">
																																	<altova:inline-container-substitute>
																																		<xsl:apply-templates/>
																																	</altova:inline-container-substitute>
																																</xsl:for-each>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																											</fo:table-row>
																											<fo:table-row>
																												<fo:table-cell font-family="Verdana" font-size="10pt" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" font-weight="bold" line-height="12pt" margin-top="0pt" padding-right="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 9 and Language = $language]/Value"/>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																												<fo:table-cell font-family="Verdana" font-size="10pt" height="auto" line-height="111%" padding="2pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-left="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<xsl:for-each select="PREREQUISITE">
																																	<altova:inline-container-substitute>
																																		<xsl:apply-templates/>
																																	</altova:inline-container-substitute>
																																</xsl:for-each>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																											</fo:table-row>
																											<fo:table-row>
																												<fo:table-cell font-family="Verdana" font-size="10pt" height="auto" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" font-weight="bold" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 10 and Language = $language]/Value"/>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																												<fo:table-cell font-family="Verdana" font-size="10pt" height="auto" line-height="111%" padding="2pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<xsl:for-each select="COURSE_METHOD">
																																	<altova:inline-container-substitute>
																																		<xsl:apply-templates/>
																																	</altova:inline-container-substitute>
																																</xsl:for-each>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																											</fo:table-row>
																											<fo:table-row>
																												<fo:table-cell font-family="Verdana" font-size="10pt" height="auto" margin-bottom="2pt" margin-left="0pt" margin-right="2pt" margin-top="2pt" padding="3pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" font-weight="bold" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 11 and Language = $language]/Value"/>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																												<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
																													<fo:block-container overflow="hidden">
																														<fo:block text-align="left">
																															<fo:block font-size="10pt" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
																																<xsl:for-each select="COURSE_LEVEL">
																																	<altova:inline-container-substitute>
																																		<xsl:apply-templates/>
																																	</altova:inline-container-substitute>
																																</xsl:for-each>
																															</fo:block>
																														</fo:block>
																													</fo:block-container>
																												</fo:table-cell>
																											</fo:table-row>
																										</fo:table-body>
																									</fo:table>
																								</xsl:variable>
																								<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																				</fo:table-row>
																			</fo:table-body>
																		</fo:table>
																	</xsl:variable>
																	<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
														<fo:table-cell empty-cells="hide" font-family="Verdana" font-size="10pt" height="auto" min-width="0pt" padding="2" display-align="before">
															<fo:block-container overflow="hidden">
																<fo:block text-align="left">
																	<xsl:if test="fn:count(fn:distinct-values(DATE-LIST/DATE[@id &gt; 0]/@id) )&gt; 0">
																		<fo:block color="#618f05" font-size="14pt" font-weight="bold" margin-top="0pt" padding-top="0pt" text-align="left" margin-right="100% - 100%" space-before="1.12em" space-after="1.12em" margin="0pt">
																			<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/Dates.png&apos;"/>
																			<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
																				<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
																					<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
																						<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
																					</xsl:when>
																					<xsl:otherwise>
																						<xsl:sequence select="(0, 0)"/>
																					</xsl:otherwise>
																				</xsl:choose>
																				<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
																			</xsl:variable>
																			<fo:external-graphic>
																				<xsl:if test="$altova:seqWidthHeight[2] != 0">
																					<xsl:attribute name="scaling" select="'non-uniform'"/>
																					<xsl:variable name="sContent-height">
																						<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																							<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[2], &apos;px&apos;)"/>
																						</xsl:call-template>
																					</xsl:variable>
																					<xsl:if test="$sContent-height != ''">
																						<xsl:attribute name="content-height">
																							<xsl:value-of select="$sContent-height"/>
																						</xsl:attribute>
																					</xsl:if>
																				</xsl:if>
																				<xsl:if test="$altova:seqWidthHeight[1] != 0">
																					<xsl:attribute name="scaling" select="'non-uniform'"/>
																					<xsl:variable name="sContent-width">
																						<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																							<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[1], &apos;px&apos;)"/>
																						</xsl:call-template>
																					</xsl:variable>
																					<xsl:if test="$sContent-width != ''">
																						<xsl:attribute name="content-width">
																							<xsl:value-of select="$sContent-width"/>
																						</xsl:attribute>
																					</xsl:if>
																				</xsl:if>
																				<xsl:attribute name="src">
																					<xsl:text>url(</xsl:text>
																					<xsl:call-template name="altova:double-backslash">
																						<xsl:with-param name="text">
																							<xsl:value-of select="string(&apos;../Images/Dates.png&apos;)"/>
																						</xsl:with-param>
																						<xsl:with-param name="text-length">
																							<xsl:value-of select="string-length(string(&apos;../Images/Dates.png&apos;))"/>
																						</xsl:with-param>
																					</xsl:call-template>
																					<xsl:text>)</xsl:text>
																				</xsl:attribute>
																			</fo:external-graphic>
																			<fo:inline>
																				<xsl:text>&#x200B;</xsl:text>
																			</fo:inline>
																			<xsl:choose>
																				<xsl:when test="$language = &apos;en&apos;">
																					<fo:inline>
																						<xsl:text>Course Dates</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="$language = &apos;de&apos;">
																					<fo:inline>
																						<xsl:text>Termine</xsl:text>
																					</fo:inline>
																				</xsl:when>
																			</xsl:choose>
																		</fo:block>
																		<xsl:call-template name="OutputCalendar">
																			<xsl:with-param name="pDateList" select="DATE-LIST"/>
																			<xsl:with-param name="language" select="$language"/>
																			<xsl:with-param name="outputType" select="$SV_OutputFormat "/>
																			<xsl:with-param name="validCities" select='string-join(fn:distinct-values($XML4/LOCATION-LIST/COUNTRY-LIST/COUNTRY/CITY-LIST/CITY[GROUP-LIST/GROUP_ID = fn:tokenize($locationGroups, ",")]/fn:string(NAME)), ",")'/>
																		</xsl:call-template>
																		<fo:block font-size="0.13in" line-height="171%" margin-top="0pt" padding-top="0pt" text-align="right" width="100%" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
																			<fo:block font-size="10pt" line-height="normal" margin="0pt" margin-top="0pt" padding-top="0pt" text-align="right" width="100%" margin-right="0pt + 100% - 100%">
																				<xsl:choose>
																					<xsl:when test="$language = &apos;en&apos;">
																						<fo:inline>
																							<xsl:text>Prices plus local taxes.</xsl:text>
																						</fo:inline>
																					</xsl:when>
																					<xsl:when test="$language = &apos;de&apos;">
																						<fo:inline>
																							<xsl:text>Preise zzgl. lokale Steuern.</xsl:text>
																						</fo:inline>
																					</xsl:when>
																				</xsl:choose>
																			</fo:block>
																		</fo:block>
																	</xsl:if>
																</fo:block>
															</fo:block-container>
														</fo:table-cell>
													</fo:table-row>
												</fo:table-body>
											</fo:table>
										</xsl:variable>
										<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
										<fo:block font-size="0.13in" keep-together.within-page="always" keep-together.within-column="always" line-height="171%" margin-right="5pt + 100% - 100%" margin-top="0pt" padding-top="0pt" space-before="0" space-after="0" margin="0pt">
											<fo:block color="#618f05" font-size="14pt" font-weight="bold" keep-together.within-page="always" keep-together.within-column="always" margin-top="0pt" padding-top="0pt" margin-right="100% - 100%" space-before="1.12em" space-after="1.12em" margin="0pt">
												<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/Overview.png&apos;"/>
												<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
													<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
														<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
															<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:sequence select="(0, 0)"/>
														</xsl:otherwise>
													</xsl:choose>
													<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
												</xsl:variable>
												<fo:external-graphic>
													<xsl:if test="$altova:seqWidthHeight[2] != 0">
														<xsl:attribute name="scaling" select="'non-uniform'"/>
														<xsl:variable name="sContent-height">
															<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[2], &apos;px&apos;)"/>
															</xsl:call-template>
														</xsl:variable>
														<xsl:if test="$sContent-height != ''">
															<xsl:attribute name="content-height">
																<xsl:value-of select="$sContent-height"/>
															</xsl:attribute>
														</xsl:if>
													</xsl:if>
													<xsl:if test="$altova:seqWidthHeight[1] != 0">
														<xsl:attribute name="scaling" select="'non-uniform'"/>
														<xsl:variable name="sContent-width">
															<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[1], &apos;px&apos;)"/>
															</xsl:call-template>
														</xsl:variable>
														<xsl:if test="$sContent-width != ''">
															<xsl:attribute name="content-width">
																<xsl:value-of select="$sContent-width"/>
															</xsl:attribute>
														</xsl:if>
													</xsl:if>
													<xsl:attribute name="src">
														<xsl:text>url(</xsl:text>
														<xsl:call-template name="altova:double-backslash">
															<xsl:with-param name="text">
																<xsl:value-of select="string(&apos;../Images/Overview.png&apos;)"/>
															</xsl:with-param>
															<xsl:with-param name="text-length">
																<xsl:value-of select="string-length(string(&apos;../Images/Overview.png&apos;))"/>
															</xsl:with-param>
														</xsl:call-template>
														<xsl:text>)</xsl:text>
													</xsl:attribute>
												</fo:external-graphic>
												<fo:inline>
													<xsl:text>&#x200B;</xsl:text>
												</fo:inline>
												<xsl:choose>
													<xsl:when test="$language = &apos;en&apos;">
														<fo:inline>
															<xsl:text>Course Description</xsl:text>
														</fo:inline>
													</xsl:when>
													<xsl:when test="$language = &apos;de&apos;">
														<fo:inline>
															<xsl:text>Kursbeschreibung</xsl:text>
														</fo:inline>
													</xsl:when>
												</xsl:choose>
											</fo:block>
											<fo:block font-size="10pt" keep-together.within-page="always" keep-together.within-column="always" line-height="12pt" margin-top="0pt" padding-top="0pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-after="1.12em">
												<xsl:for-each select="OBJECTIVES">
													<altova:inline-container-substitute>
														<xsl:apply-templates/>
													</altova:inline-container-substitute>
												</xsl:for-each>
											</fo:block>
										</fo:block>
										<xsl:apply-templates select="Module-List"/>
									</altova:level>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:otherwise>
				</xsl:choose>
			</altova:level>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="DATE-LIST">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<altova:line-break/>
		<fo:block color="#618f05" font-size="14pt" font-weight="bold" margin-right="100% - 100%" space-before="1.12em" space-after="1.12em" margin="0pt">
			<xsl:choose>
				<xsl:when test="$language = &apos;en&apos;">
					<fo:inline>
						<xsl:text>Calendar</xsl:text>
					</fo:inline>
				</xsl:when>
				<xsl:when test="$language = &apos;de&apos;">
					<fo:inline>
						<xsl:text>Kalender</xsl:text>
					</fo:inline>
				</xsl:when>
			</xsl:choose>
		</fo:block>
		<xsl:variable name="altova:table">
			<fo:table table-layout="fixed" width="100%" border="solid 1pt gray" border-spacing="2pt">
				<fo:table-column column-width="proportional-column-width(1)"/>
				<fo:table-column column-width="proportional-column-width(1)"/>
				<fo:table-column column-width="proportional-column-width(1)"/>
				<fo:table-column column-width="proportional-column-width(1)"/>
				<xsl:variable name="altova:CurrContextGrid_7" select="."/>
				<xsl:variable name="altova:ColumnData"/>
				<fo:table-header start-indent="0pt">
					<fo:table-row>
						<fo:table-cell font-family="Verdana" font-size="10pt" border="solid 1pt gray" padding="2pt" display-align="center">
							<fo:block-container overflow="hidden">
								<fo:block text-align="left">
									<fo:inline>
										<xsl:text>CITY</xsl:text>
									</fo:inline>
								</fo:block>
							</fo:block-container>
						</fo:table-cell>
						<fo:table-cell font-family="Verdana" font-size="10pt" border="solid 1pt gray" padding="2pt" display-align="center">
							<fo:block-container overflow="hidden">
								<fo:block text-align="left">
									<fo:inline>
										<xsl:text>START_DATE</xsl:text>
									</fo:inline>
								</fo:block>
							</fo:block-container>
						</fo:table-cell>
						<fo:table-cell font-family="Verdana" font-size="10pt" border="solid 1pt gray" padding="2pt" display-align="center">
							<fo:block-container overflow="hidden">
								<fo:block text-align="left">
									<fo:inline>
										<xsl:text>END_DATE</xsl:text>
									</fo:inline>
								</fo:block>
							</fo:block-container>
						</fo:table-cell>
						<fo:table-cell font-family="Verdana" font-size="10pt" border="solid 1pt gray" padding="2pt" display-align="center">
							<fo:block-container overflow="hidden">
								<fo:block text-align="left">
									<fo:inline>
										<xsl:text>PRICE</xsl:text>
									</fo:inline>
								</fo:block>
							</fo:block-container>
						</fo:table-cell>
					</fo:table-row>
				</fo:table-header>
				<fo:table-body start-indent="0pt">
					<xsl:for-each select="DATE">
						<fo:table-row>
							<fo:table-cell font-family="Verdana" font-size="10pt" border="solid 1pt gray" padding="2pt" display-align="center">
								<fo:block-container overflow="hidden">
									<fo:block text-align="left">
										<xsl:for-each select="CITY">
											<altova:inline-container-substitute>
												<xsl:apply-templates/>
											</altova:inline-container-substitute>
										</xsl:for-each>
									</fo:block>
								</fo:block-container>
							</fo:table-cell>
							<fo:table-cell font-family="Verdana" font-size="10pt" border="solid 1pt gray" padding="2pt" display-align="center">
								<fo:block-container overflow="hidden">
									<fo:block text-align="left">
										<xsl:for-each select="START_DATE">
											<altova:inline-container-substitute>
												<xsl:apply-templates/>
											</altova:inline-container-substitute>
										</xsl:for-each>
									</fo:block>
								</fo:block-container>
							</fo:table-cell>
							<fo:table-cell font-family="Verdana" font-size="10pt" border="solid 1pt gray" padding="2pt" display-align="center">
								<fo:block-container overflow="hidden">
									<fo:block text-align="left">
										<xsl:for-each select="END_DATE">
											<altova:inline-container-substitute>
												<xsl:apply-templates/>
											</altova:inline-container-substitute>
										</xsl:for-each>
									</fo:block>
								</fo:block-container>
							</fo:table-cell>
							<fo:table-cell font-family="Verdana" font-size="10pt" border="solid 1pt gray" padding="2pt" display-align="center">
								<fo:block-container overflow="hidden">
									<fo:block text-align="left">
										<xsl:for-each select="PRICE">
											<altova:inline-container-substitute>
												<xsl:apply-templates/>
											</altova:inline-container-substitute>
										</xsl:for-each>
									</fo:block>
								</fo:block-container>
							</fo:table-cell>
						</fo:table-row>
					</xsl:for-each>
				</fo:table-body>
			</fo:table>
		</xsl:variable>
		<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
	</xsl:template>
	<xsl:template match="Module-List">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:if test="not(preceding-sibling::Module-List)">
			<xsl:for-each select="..">
				<fo:block font-size="0.13in" keep-together.within-page="auto" keep-together.within-column="auto" line-height="171%" margin-right="5pt + 100% - 100%" page-break-after="always" space-before="0" space-after="0" margin="0pt">
					<xsl:for-each select="Module-List">
						<fo:block font-size="10pt" keep-together.within-page="always" keep-together.within-column="always" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
							<fo:block color="#618f05" font-size="14pt" font-weight="bold" keep-together.within-page="always" keep-together.within-column="always" margin-right="100% - 100%" space-before="1.12em" space-after="1.12em" margin="0pt">
								<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/Details2.png&apos;"/>
								<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
									<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
										<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
											<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="(0, 0)"/>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
								</xsl:variable>
								<fo:external-graphic>
									<xsl:if test="$altova:seqWidthHeight[2] != 0">
										<xsl:attribute name="scaling" select="'non-uniform'"/>
										<xsl:variable name="sContent-height">
											<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
												<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[2], &apos;px&apos;)"/>
											</xsl:call-template>
										</xsl:variable>
										<xsl:if test="$sContent-height != ''">
											<xsl:attribute name="content-height">
												<xsl:value-of select="$sContent-height"/>
											</xsl:attribute>
										</xsl:if>
									</xsl:if>
									<xsl:if test="$altova:seqWidthHeight[1] != 0">
										<xsl:attribute name="scaling" select="'non-uniform'"/>
										<xsl:variable name="sContent-width">
											<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
												<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[1], &apos;px&apos;)"/>
											</xsl:call-template>
										</xsl:variable>
										<xsl:if test="$sContent-width != ''">
											<xsl:attribute name="content-width">
												<xsl:value-of select="$sContent-width"/>
											</xsl:attribute>
										</xsl:if>
									</xsl:if>
									<xsl:attribute name="src">
										<xsl:text>url(</xsl:text>
										<xsl:call-template name="altova:double-backslash">
											<xsl:with-param name="text">
												<xsl:value-of select="string(&apos;../Images/Details2.png&apos;)"/>
											</xsl:with-param>
											<xsl:with-param name="text-length">
												<xsl:value-of select="string-length(string(&apos;../Images/Details2.png&apos;))"/>
											</xsl:with-param>
										</xsl:call-template>
										<xsl:text>)</xsl:text>
									</xsl:attribute>
								</fo:external-graphic>
								<fo:inline>
									<xsl:text>&#x200B;</xsl:text>
								</fo:inline>
								<xsl:choose>
									<xsl:when test="$language = &apos;en&apos;">
										<fo:inline>
											<xsl:text>Course Outline</xsl:text>
										</fo:inline>
									</xsl:when>
									<xsl:when test="$language = &apos;de&apos;">
										<fo:inline>
											<xsl:text>Kursinhalte</xsl:text>
										</fo:inline>
									</xsl:when>
								</xsl:choose>
							</fo:block>
							<xsl:for-each select="Module">
								<xsl:if test="fn:position() = 1">
									<fo:block font-size="12pt" keep-together.within-page="always" keep-together.within-column="always" margin-right="100% - 100%" font-weight="bold" space-before="1.5em" space-after="1.5em" margin="0pt">
										<xsl:for-each select="Order">
											<altova:inline-container-substitute keep-together.within-page="always" keep-together.within-column="always">
												<xsl:apply-templates/>
											</altova:inline-container-substitute>
										</xsl:for-each>
										<fo:inline>
											<xsl:text>. </xsl:text>
										</fo:inline>
										<xsl:for-each select="Title">
											<altova:inline-container-substitute keep-together.within-page="always" keep-together.within-column="always">
												<xsl:apply-templates/>
											</altova:inline-container-substitute>
										</xsl:for-each>
									</fo:block>
									<fo:block font-size="10pt" keep-together.within-page="always" keep-together.within-column="always" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
										<xsl:if test="count(Length) != 0">
											<fo:inline>
												<xsl:text>(</xsl:text>
											</fo:inline>
											<xsl:for-each select="Length">
												<altova:inline-container-substitute keep-together.within-page="always" keep-together.within-column="always">
													<xsl:apply-templates/>
												</altova:inline-container-substitute>
											</xsl:for-each>
											<fo:inline>
												<xsl:text>&#160;</xsl:text>
											</fo:inline>
											<xsl:choose>
												<xsl:when test="number(Length) != 1">
													<xsl:choose>
														<xsl:when test="$language = &apos;en&apos;">
															<fo:inline>
																<xsl:text>Days</xsl:text>
															</fo:inline>
														</xsl:when>
														<xsl:when test="$language = &apos;de&apos;">
															<fo:inline>
																<xsl:text>Tage</xsl:text>
															</fo:inline>
														</xsl:when>
													</xsl:choose>
												</xsl:when>
												<xsl:otherwise>
													<xsl:choose>
														<xsl:when test="$language = &apos;en&apos;">
															<fo:inline>
																<xsl:text>Day</xsl:text>
															</fo:inline>
														</xsl:when>
														<xsl:when test="$language = &apos;de&apos;">
															<fo:inline>
																<xsl:text>Tag</xsl:text>
															</fo:inline>
														</xsl:when>
													</xsl:choose>
												</xsl:otherwise>
											</xsl:choose>
											<fo:inline>
												<xsl:text>) </xsl:text>
											</fo:inline>
										</xsl:if>
										<xsl:for-each select="Synopsis">
											<altova:inline-container-substitute keep-together.within-page="always" keep-together.within-column="always">
												<xsl:apply-templates/>
											</altova:inline-container-substitute>
										</xsl:for-each>
									</fo:block>
								</xsl:if>
							</xsl:for-each>
						</fo:block>
						<xsl:for-each select="Module">
							<xsl:if test="fn:position() &gt; 1">
								<fo:block font-size="10pt" keep-together.within-page="always" keep-together.within-column="always" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
									<fo:block font-size="12pt" keep-together.within-page="always" keep-together.within-column="always" margin-right="100% - 100%" font-weight="bold" space-before="1.5em" space-after="1.5em" margin="0pt">
										<xsl:for-each select="Order">
											<altova:inline-container-substitute keep-together.within-page="always" keep-together.within-column="always">
												<xsl:apply-templates/>
											</altova:inline-container-substitute>
										</xsl:for-each>
										<fo:inline>
											<xsl:text>. </xsl:text>
										</fo:inline>
										<xsl:for-each select="Title">
											<altova:inline-container-substitute keep-together.within-page="always" keep-together.within-column="always">
												<xsl:apply-templates/>
											</altova:inline-container-substitute>
										</xsl:for-each>
									</fo:block>
									<fo:block font-size="10pt" keep-together.within-page="always" keep-together.within-column="always" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
										<xsl:if test="count(Length) != 0">
											<fo:inline>
												<xsl:text>(</xsl:text>
											</fo:inline>
											<xsl:for-each select="Length">
												<altova:inline-container-substitute keep-together.within-page="always" keep-together.within-column="always">
													<xsl:apply-templates/>
												</altova:inline-container-substitute>
											</xsl:for-each>
											<fo:inline>
												<xsl:text>&#160;</xsl:text>
											</fo:inline>
											<xsl:choose>
												<xsl:when test="number(Length) != 1">
													<xsl:choose>
														<xsl:when test="$language = &apos;en&apos;">
															<fo:inline>
																<xsl:text>Days</xsl:text>
															</fo:inline>
														</xsl:when>
														<xsl:when test="$language = &apos;de&apos;">
															<fo:inline>
																<xsl:text>Tage</xsl:text>
															</fo:inline>
														</xsl:when>
													</xsl:choose>
												</xsl:when>
												<xsl:otherwise>
													<xsl:choose>
														<xsl:when test="$language = &apos;en&apos;">
															<fo:inline>
																<xsl:text>Day</xsl:text>
															</fo:inline>
														</xsl:when>
														<xsl:when test="$language = &apos;de&apos;">
															<fo:inline>
																<xsl:text>Tag</xsl:text>
															</fo:inline>
														</xsl:when>
													</xsl:choose>
												</xsl:otherwise>
											</xsl:choose>
											<fo:inline>
												<xsl:text>) </xsl:text>
											</fo:inline>
										</xsl:if>
										<xsl:for-each select="Synopsis">
											<altova:inline-container-substitute keep-together.within-page="always" keep-together.within-column="always">
												<xsl:apply-templates/>
											</altova:inline-container-substitute>
										</xsl:for-each>
									</fo:block>
								</fo:block>
							</xsl:if>
						</xsl:for-each>
					</xsl:for-each>
				</fo:block>
				<altova:line-break/>
			</xsl:for-each>
		</xsl:if>
	</xsl:template>
	<xsl:template name="AddressBerlin">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<fo:block font-size="10pt" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
			<fo:inline>
				<xsl:text>Comelio GmbH - Goethestr. 34 -13086 Berlin</xsl:text>
			</fo:inline>
		</fo:block>
	</xsl:template>
	<xsl:template name="Label">
		<xsl:param name="Value" as="xs:string*" select="&apos;&apos;"/>
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
	</xsl:template>
	<xsl:template name="Introduction">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:choose>
			<xsl:when test="$language = &apos;en&apos;">
				<fo:inline>
					<xsl:text>Course Catalog</xsl:text>
				</fo:inline>
			</xsl:when>
			<xsl:when test="$language = &apos;de&apos;">
				<fo:inline>
					<xsl:text>Kurskatalog</xsl:text>
				</fo:inline>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="Locations">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<altova:level>
			<altova:marker altova:name="TOC" altova:id="coTitle">
				<xsl:attribute name="altova:entrytext">
					<xsl:value-of select="if($language = 'en') 
then 'a. Locations'
else 'a. Standorte'"/>
				</xsl:attribute>
			</altova:marker>
			<xsl:choose>
				<xsl:when test="$language = &apos;en&apos;">
					<fo:block font-size="16pt" font-weight="bold" margin-top="0pt" margin-right="100% - 100%" space-before="0.83em" space-after="0.83em" margin="0pt">
						<fo:inline>
							<xsl:text>a. Locations</xsl:text>
						</fo:inline>
					</fo:block>
					<xsl:variable name="altova:table">
						<fo:table table-layout="fixed" width="100%" border-spacing="2pt">
							<fo:table-column column-width="2.420in"/>
							<fo:table-column column-width="proportional-column-width(1)"/>
							<xsl:variable name="altova:CurrContextGrid_8" select="."/>
							<xsl:variable name="altova:ColumnData"/>
							<fo:table-body start-indent="0pt">
								<fo:table-row>
									<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
										<fo:block-container overflow="hidden">
											<fo:block text-align="left">
												<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/Locations_Map_GER-AT-CH.png&apos;"/>
												<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
													<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
														<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
															<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:sequence select="(0, 0)"/>
														</xsl:otherwise>
													</xsl:choose>
													<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
												</xsl:variable>
												<fo:external-graphic>
													<xsl:if test="$altova:seqWidthHeight[2] != 0">
														<xsl:attribute name="scaling" select="'non-uniform'"/>
														<xsl:variable name="sContent-height">
															<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[2], &apos;px&apos;)"/>
															</xsl:call-template>
														</xsl:variable>
														<xsl:if test="$sContent-height != ''">
															<xsl:attribute name="content-height">
																<xsl:value-of select="$sContent-height"/>
															</xsl:attribute>
														</xsl:if>
													</xsl:if>
													<xsl:if test="$altova:seqWidthHeight[1] != 0">
														<xsl:attribute name="scaling" select="'non-uniform'"/>
														<xsl:variable name="sContent-width">
															<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[1], &apos;px&apos;)"/>
															</xsl:call-template>
														</xsl:variable>
														<xsl:if test="$sContent-width != ''">
															<xsl:attribute name="content-width">
																<xsl:value-of select="$sContent-width"/>
															</xsl:attribute>
														</xsl:if>
													</xsl:if>
													<xsl:attribute name="src">
														<xsl:text>url(</xsl:text>
														<xsl:call-template name="altova:double-backslash">
															<xsl:with-param name="text">
																<xsl:value-of select="string(&apos;../Images/Locations_Map_GER-AT-CH.png&apos;)"/>
															</xsl:with-param>
															<xsl:with-param name="text-length">
																<xsl:value-of select="string-length(string(&apos;../Images/Locations_Map_GER-AT-CH.png&apos;))"/>
															</xsl:with-param>
														</xsl:call-template>
														<xsl:text>)</xsl:text>
													</xsl:attribute>
												</fo:external-graphic>
												<fo:inline>
													<xsl:text>&#x200B;</xsl:text>
												</fo:inline>
											</fo:block>
										</fo:block-container>
									</fo:table-cell>
									<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
										<fo:block-container overflow="hidden">
											<fo:block text-align="left">
												<fo:block font-size="10pt" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
													<fo:inline>
														<xsl:text>Our trainings take place at various locations in the German-speaking countries.</xsl:text>
													</fo:inline>
												</fo:block>
												<fo:block font-size="10pt" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
													<fo:inline font-weight="bold">
														<xsl:text>Public trainings:</xsl:text>
													</fo:inline>
												</fo:block>
												<fo:block font-size="10pt" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
													<fo:inline>
														<xsl:text>You can enroll for public trainings at our training centers across Germany like in Berlin, Dresden, Hamburg, München / Munich, Düsseldorf, Frankfurt, and Stuttgart. Not all public trainings will be organized in all cities but you can still book a particular training for your team in one of our training and conference centers.</xsl:text>
													</fo:inline>
												</fo:block>
												<fo:block font-size="10pt" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
													<fo:inline>
														<xsl:text>In Austria you can attend seminars and trainings in Wien / Vienna while we offer training dates in Switzerland in Zürich / Zurich.</xsl:text>
													</fo:inline>
												</fo:block>
												<fo:block font-size="10pt" font-weight="bold" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
													<fo:inline>
														<xsl:text>On-site trainings:</xsl:text>
													</fo:inline>
												</fo:block>
												<fo:block font-size="10pt" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
													<fo:inline>
														<xsl:text>We have mobile and flexible trainers / lecturers who like to visit you and your team for an on-site training or a training in a conference center or hotel near you.</xsl:text>
													</fo:inline>
												</fo:block>
											</fo:block>
										</fo:block-container>
									</fo:table-cell>
								</fo:table-row>
							</fo:table-body>
						</fo:table>
					</xsl:variable>
					<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
				</xsl:when>
				<xsl:when test="$language = &apos;de&apos;">
					<fo:block font-size="16pt" font-weight="bold" margin-top="0pt" margin-right="100% - 100%" space-before="0.83em" space-after="0.83em" margin="0pt">
						<fo:inline>
							<xsl:text>a. Standorte</xsl:text>
						</fo:inline>
					</fo:block>
					<xsl:variable name="altova:table">
						<fo:table table-layout="fixed" width="100%" border-spacing="2pt">
							<fo:table-column column-width="2.420in"/>
							<fo:table-column column-width="proportional-column-width(1)"/>
							<xsl:variable name="altova:CurrContextGrid_9" select="."/>
							<xsl:variable name="altova:ColumnData"/>
							<fo:table-body start-indent="0pt">
								<fo:table-row>
									<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
										<fo:block-container overflow="hidden">
											<fo:block text-align="left">
												<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/Locations_Map_GER-AT-CH.png&apos;"/>
												<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
													<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
														<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
															<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:sequence select="(0, 0)"/>
														</xsl:otherwise>
													</xsl:choose>
													<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
												</xsl:variable>
												<fo:external-graphic>
													<xsl:if test="$altova:seqWidthHeight[2] != 0">
														<xsl:attribute name="scaling" select="'non-uniform'"/>
														<xsl:variable name="sContent-height">
															<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[2], &apos;px&apos;)"/>
															</xsl:call-template>
														</xsl:variable>
														<xsl:if test="$sContent-height != ''">
															<xsl:attribute name="content-height">
																<xsl:value-of select="$sContent-height"/>
															</xsl:attribute>
														</xsl:if>
													</xsl:if>
													<xsl:if test="$altova:seqWidthHeight[1] != 0">
														<xsl:attribute name="scaling" select="'non-uniform'"/>
														<xsl:variable name="sContent-width">
															<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
																<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[1], &apos;px&apos;)"/>
															</xsl:call-template>
														</xsl:variable>
														<xsl:if test="$sContent-width != ''">
															<xsl:attribute name="content-width">
																<xsl:value-of select="$sContent-width"/>
															</xsl:attribute>
														</xsl:if>
													</xsl:if>
													<xsl:attribute name="src">
														<xsl:text>url(</xsl:text>
														<xsl:call-template name="altova:double-backslash">
															<xsl:with-param name="text">
																<xsl:value-of select="string(&apos;../Images/Locations_Map_GER-AT-CH.png&apos;)"/>
															</xsl:with-param>
															<xsl:with-param name="text-length">
																<xsl:value-of select="string-length(string(&apos;../Images/Locations_Map_GER-AT-CH.png&apos;))"/>
															</xsl:with-param>
														</xsl:call-template>
														<xsl:text>)</xsl:text>
													</xsl:attribute>
												</fo:external-graphic>
												<fo:inline>
													<xsl:text>&#x200B;</xsl:text>
												</fo:inline>
											</fo:block>
										</fo:block-container>
									</fo:table-cell>
									<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
										<fo:block-container overflow="hidden">
											<fo:block text-align="left">
												<fo:block font-size="10pt" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
													<fo:inline>
														<xsl:text>Unsere Seminare finden an verschiedenen Standorten in der DACH-Region statt.</xsl:text>
													</fo:inline>
												</fo:block>
												<fo:block font-size="10pt" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
													<fo:inline font-weight="bold">
														<xsl:text>Öffentliche Seminare:</xsl:text>
													</fo:inline>
												</fo:block>
												<fo:block font-size="10pt" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
													<fo:inline>
														<xsl:text>Unsere Seminare können Sie an unseren Standorten in Deutschland in Berlin, Dresden, Hamburg, München, Düsseldorf, Frankfurt und Stuttgart buchen. Nicht alle öffentlichen Seminare finden an allen Standorten statt. Doch gibt es die Möglichkeit, für Ihre Gruppe unsere Seminarzentren für en individuelles Training zu verwenden.</xsl:text>
													</fo:inline>
												</fo:block>
												<fo:block font-size="10pt" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
													<fo:inline>
														<xsl:text>In Österreich bieten wir Seminare in Wien und in der Schweiz in Zürich an.</xsl:text>
													</fo:inline>
												</fo:block>
												<fo:block font-size="10pt" font-weight="bold" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
													<fo:inline>
														<xsl:text>Inhouse Seminare:</xsl:text>
													</fo:inline>
												</fo:block>
												<fo:block font-size="10pt" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
													<fo:inline>
														<xsl:text>Wir sind regional flexibel und kommen auch gerne direkt zu Ihnen oder organisieren ein für Sie angepasstes Seminar in einem Tagungszentrum in Ihrer Stadt.</xsl:text>
													</fo:inline>
												</fo:block>
											</fo:block>
										</fo:block-container>
									</fo:table-cell>
								</fo:table-row>
							</fo:table-body>
						</fo:table>
					</xsl:variable>
					<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
				</xsl:when>
			</xsl:choose>
		</altova:level>
		<altova:line-break/>
		<xsl:call-template name="Country"/>
	</xsl:template>
	<xsl:template name="Disclaimer">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<altova:level>
			<altova:marker altova:name="TOC" altova:id="coTitle">
				<xsl:attribute name="altova:entrytext">
					<xsl:value-of select="if($language = 'en')
then 'b. Disclaimer'
else 'b. Impressum'"/>
				</xsl:attribute>
			</altova:marker>
			<xsl:choose>
				<xsl:when test="$language = &apos;en&apos;">
					<fo:block font-size="16pt" font-weight="bold" margin-top="0pt" margin-right="100% - 100%" space-before="0.83em" space-after="0.83em" margin="0pt">
						<fo:inline>
							<xsl:text>b. Disclaimer</xsl:text>
						</fo:inline>
					</fo:block>
				</xsl:when>
				<xsl:when test="$language = &apos;de&apos;">
					<fo:block font-size="16pt" font-weight="bold" margin-top="0pt" margin-right="100% - 100%" space-before="0.83em" space-after="0.83em" margin="0pt">
						<fo:inline>
							<xsl:text>b. Impressum</xsl:text>
						</fo:inline>
					</fo:block>
				</xsl:when>
			</xsl:choose>
		</altova:level>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<xsl:variable name="altova:sUrlOrData" select="&apos;../Images/Frankfurt%20Interior-s.jpg&apos;"/>
		<xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
			<xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
				<xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
					<xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="(0, 0)"/>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
		</xsl:variable>
		<fo:external-graphic>
			<xsl:if test="$altova:seqWidthHeight[2] != 0">
				<xsl:attribute name="scaling" select="'non-uniform'"/>
				<xsl:variable name="sContent-height">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[2], &apos;px&apos;)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:if test="$sContent-height != ''">
					<xsl:attribute name="content-height">
						<xsl:value-of select="$sContent-height"/>
					</xsl:attribute>
				</xsl:if>
			</xsl:if>
			<xsl:if test="$altova:seqWidthHeight[1] != 0">
				<xsl:attribute name="scaling" select="'non-uniform'"/>
				<xsl:variable name="sContent-width">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="concat($altova:seqWidthHeight[1], &apos;px&apos;)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:if test="$sContent-width != ''">
					<xsl:attribute name="content-width">
						<xsl:value-of select="$sContent-width"/>
					</xsl:attribute>
				</xsl:if>
			</xsl:if>
			<xsl:attribute name="src">
				<xsl:text>url(</xsl:text>
				<xsl:call-template name="altova:double-backslash">
					<xsl:with-param name="text">
						<xsl:value-of select="string(&apos;../Images/Frankfurt%20Interior-s.jpg&apos;)"/>
					</xsl:with-param>
					<xsl:with-param name="text-length">
						<xsl:value-of select="string-length(string(&apos;../Images/Frankfurt%20Interior-s.jpg&apos;))"/>
					</xsl:with-param>
				</xsl:call-template>
				<xsl:text>)</xsl:text>
			</xsl:attribute>
		</fo:external-graphic>
		<fo:inline>
			<xsl:text>&#x200B;</xsl:text>
		</fo:inline>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<altova:line-break/>
		<xsl:variable name="altova:table">
			<fo:table table-layout="fixed" width="100%" border-spacing="2pt">
				<fo:table-column column-width="20%"/>
				<fo:table-column column-width="30%"/>
				<fo:table-column column-width="proportional-column-width(1)"/>
				<xsl:variable name="altova:CurrContextGrid_10" select="."/>
				<xsl:variable name="altova:ColumnData"/>
				<fo:table-body start-indent="0pt">
					<fo:table-row>
						<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="before">
							<fo:block-container overflow="hidden">
								<fo:block text-align="left">
									<fo:block font-size="10pt" line-height="12pt" text-align="justify" margin-right="100% - 100%" margin="0pt" space-before="1.12em" space-after="1.12em">
										<fo:inline>
											<xsl:text>Comelio GmbH</xsl:text>
										</fo:inline>
										<altova:line-break/>
										<fo:inline>
											<xsl:text>Goethestr. 34</xsl:text>
										</fo:inline>
										<altova:line-break/>
										<fo:inline>
											<xsl:text>13086 Berlin</xsl:text>
										</fo:inline>
										<altova:line-break/>
										<fo:inline>
											<xsl:text>Germany</xsl:text>
										</fo:inline>
									</fo:block>
								</fo:block>
							</fo:block-container>
						</fo:table-cell>
						<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="before">
							<fo:block-container overflow="hidden">
								<fo:block text-align="left">
									<xsl:variable name="List0xA5580E0">
										<fo:list-block provisional-distance-between-starts="7mm" provisional-label-separation="2mm">
											<fo:list-item>
												<fo:list-item-label end-indent="label-end()" text-align="right">
													<fo:block font-family="Courier">&#x2022;</fo:block>
												</fo:list-item-label>
												<fo:list-item-body start-indent="body-start()">
													<fo:block>
														<fo:inline>
															<xsl:text>Tel: +49.30.8145622.00</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:list-item-body>
											</fo:list-item>
											<fo:list-item>
												<fo:list-item-label end-indent="label-end()" text-align="right">
													<fo:block font-family="Courier">&#x2022;</fo:block>
												</fo:list-item-label>
												<fo:list-item-body start-indent="body-start()">
													<fo:block>
														<fo:inline>
															<xsl:text>Fax: +49.30.8145622.10</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:list-item-body>
											</fo:list-item>
										</fo:list-block>
									</xsl:variable>
									<xsl:if test="$List0xA5580E0//fo:list-item[1]">
										<xsl:copy-of select="$List0xA5580E0"/>
									</xsl:if>
								</fo:block>
							</fo:block-container>
						</fo:table-cell>
						<fo:table-cell font-family="Verdana" font-size="10pt" padding="2pt" display-align="before">
							<fo:block-container overflow="hidden">
								<fo:block text-align="left">
									<xsl:variable name="List0xA5583E0">
										<fo:list-block provisional-distance-between-starts="7mm" provisional-label-separation="2mm">
											<fo:list-item>
												<fo:list-item-label end-indent="label-end()" text-align="right">
													<fo:block font-family="Courier">&#x2022;</fo:block>
												</fo:list-item-label>
												<fo:list-item-body start-indent="body-start()">
													<fo:block>
														<altova:hyperlink href="{&apos;http://www.comelio.com&apos;}" color="black" text-decoration="underline">
															<fo:inline>
																<xsl:text>www.comelio.com</xsl:text>
															</fo:inline>
														</altova:hyperlink>
														<fo:inline>
															<xsl:text> | </xsl:text>
														</fo:inline>
														<altova:hyperlink href="{&apos;http://www.comelio.de&apos;}" color="black" text-decoration="underline">
															<fo:inline>
																<xsl:text>.de</xsl:text>
															</fo:inline>
														</altova:hyperlink>
														<fo:inline>
															<xsl:text> | </xsl:text>
														</fo:inline>
														<altova:hyperlink href="{&apos;http://www.comelio.at&apos;}" color="black" text-decoration="underline">
															<fo:inline>
																<xsl:text>.at</xsl:text>
															</fo:inline>
														</altova:hyperlink>
														<fo:inline>
															<xsl:text> | </xsl:text>
														</fo:inline>
														<altova:hyperlink href="{&apos;http://www.comelio.ch&apos;}" color="black" text-decoration="underline">
															<fo:inline>
																<xsl:text>.ch</xsl:text>
															</fo:inline>
														</altova:hyperlink>
													</fo:block>
												</fo:list-item-body>
											</fo:list-item>
											<fo:list-item>
												<fo:list-item-label end-indent="label-end()" text-align="right">
													<fo:block font-family="Courier">&#x2022;</fo:block>
												</fo:list-item-label>
												<fo:list-item-body start-indent="body-start()">
													<fo:block>
														<altova:hyperlink href="{&apos;http://www.comelio-seminare.com&apos;}" color="black" text-decoration="underline">
															<fo:inline>
																<xsl:text>www.comelio-seminare.com</xsl:text>
															</fo:inline>
														</altova:hyperlink>
													</fo:block>
												</fo:list-item-body>
											</fo:list-item>
											<fo:list-item>
												<fo:list-item-label end-indent="label-end()" text-align="right">
													<fo:block font-family="Courier">&#x2022;</fo:block>
												</fo:list-item-label>
												<fo:list-item-body start-indent="body-start()">
													<fo:block>
														<altova:hyperlink href="{&apos;mailto:info@comelio.com&apos;}" color="black" text-decoration="underline">
															<fo:inline>
																<xsl:text>info@comelio.com</xsl:text>
															</fo:inline>
														</altova:hyperlink>
													</fo:block>
												</fo:list-item-body>
											</fo:list-item>
											<fo:list-item>
												<fo:list-item-label end-indent="label-end()" text-align="right">
													<fo:block font-family="Courier">&#x2022;</fo:block>
												</fo:list-item-label>
												<fo:list-item-body start-indent="body-start()">
													<fo:block>
														<altova:hyperlink href="{&apos;https://www.facebook.com/comeliogroup&apos;}" color="black" text-decoration="underline">
															<fo:inline>
																<xsl:text>https://www.facebook.com/comeliogroup</xsl:text>
															</fo:inline>
														</altova:hyperlink>
													</fo:block>
												</fo:list-item-body>
											</fo:list-item>
											<fo:list-item>
												<fo:list-item-label end-indent="label-end()" text-align="right">
													<fo:block font-family="Courier">&#x2022;</fo:block>
												</fo:list-item-label>
												<fo:list-item-body start-indent="body-start()">
													<fo:block>
														<altova:hyperlink href="{&apos;https://twitter.com/Comelio&apos;}" color="black" text-decoration="underline">
															<fo:inline>
																<xsl:text>https://twitter.com/Comelio</xsl:text>
															</fo:inline>
														</altova:hyperlink>
													</fo:block>
												</fo:list-item-body>
											</fo:list-item>
										</fo:list-block>
									</xsl:variable>
									<xsl:if test="$List0xA5583E0//fo:list-item[1]">
										<xsl:copy-of select="$List0xA5583E0"/>
									</xsl:if>
								</fo:block>
							</fo:block-container>
						</fo:table-cell>
					</fo:table-row>
				</fo:table-body>
			</fo:table>
		</xsl:variable>
		<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
		<altova:line-break/>
	</xsl:template>
	<xsl:template name="Country">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:for-each select="$XML4">
			<xsl:for-each select="LOCATION-LIST">
				<xsl:for-each select="COUNTRY-LIST">
					<xsl:for-each select="COUNTRY[if(count(fn:tokenize($locationGroups, &quot;,&quot;)) &lt; 1)
then count(CITY-LIST/CITY/NAME) &gt; 0
else
count(CITY-LIST/CITY/GROUP-LIST[GROUP_ID = fn:tokenize($locationGroups, &quot;,&quot;) ]/GROUP_ID) &gt; 0]">
						<xsl:sort select="count(CITY-LIST/CITY)" data-type="text" order="descending"/>
						<fo:block color="#618f05" font-size="14pt" font-weight="bold" margin-right="100% - 100%" space-before="1.12em" space-after="1.12em" margin="0pt">
							<xsl:for-each select="sps:getCountryName( @name ,  $language)">
								<altova:inline-container-substitute>
									<xsl:choose>
										<xsl:when test=". instance of element() or . instance of document-node()">
											<xsl:apply-templates/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of select="."/>
										</xsl:otherwise>
									</xsl:choose>
								</altova:inline-container-substitute>
							</xsl:for-each>
						</fo:block>
						<xsl:for-each select="CITY-LIST">
							<xsl:for-each select="CITY[if(count(fn:tokenize($locationGroups, &quot;,&quot;))&lt; 1)
then count(NAME) &gt; 0
else
count(GROUP-LIST[GROUP_ID = fn:tokenize($locationGroups, &quot;,&quot;)]/GROUP_ID) &gt; 0]">
								<xsl:sort select="NAME" data-type="text" order="ascending"/>
								<xsl:variable name="altova:table">
									<fo:table border="0.00in" padding=".1em" table-layout="fixed" width="100%" border-spacing="2pt">
										<fo:table-column column-width="25%"/>
										<fo:table-column column-width="auto"/>
										<xsl:variable name="altova:CurrContextGrid_11" select="."/>
										<xsl:variable name="altova:ColumnData"/>
										<fo:table-body start-indent="0pt">
											<fo:table-row>
												<fo:table-cell border="0.00in" font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<xsl:call-template name="cityThumbnail">
																<xsl:with-param name="city" select="NAME"/>
																<xsl:with-param name="outputType" select="$SV_OutputFormat "/>
															</xsl:call-template>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
												<fo:table-cell border="0.00in" font-family="Verdana" font-size="10pt" padding="2pt" display-align="center">
													<fo:block-container overflow="hidden">
														<fo:block text-align="left">
															<xsl:variable name="altova:table">
																<fo:table border="0.00in" alignment-baseline="before-edge" width="auto" table-layout="fixed" border-spacing="2pt">
																	<xsl:for-each select="ROOM-LIST">
																		<xsl:for-each select="ROOM">
																			<fo:table-column column-width="proportional-column-width(1)"/>
																		</xsl:for-each>
																	</xsl:for-each>
																	<xsl:variable name="altova:CurrContextGrid_12" select="."/>
																	<xsl:variable name="altova:ColumnData">
																		<xsl:for-each select="ROOM-LIST">
																			<altova:Element altova:sDesignElemId="13" altova:sNodeId="{generate-id(.)}" altova:sDocumentUri="{document-uri(root(.))}">
																				<xsl:for-each select="ROOM">
																					<altova:Element altova:sDesignElemId="14" altova:sNodeId="{generate-id(.)}" altova:sDocumentUri="{document-uri(root(.))}"/>
																				</xsl:for-each>
																			</altova:Element>
																		</xsl:for-each>
																	</xsl:variable>
																	<fo:table-body start-indent="0pt">
																		<fo:table-row border="0.00in">
																			<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = 13 ]"/>
																			<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
																				<xsl:variable name="altova:posCurrPseudo" select="position()"/>
																				<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
																				<xsl:variable name="altova:nodesNextPseudo" select="$altova:nodeCurrPseudo/altova:Element[ @altova:sDesignElemId = 14 ]"/>
																				<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
																					<xsl:variable name="altova:posCurrPseudo" select="position()"/>
																					<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
																					<fo:table-cell border="0.00in" font-family="Verdana" font-size="10pt" padding=".05em" display-align="center">
																						<fo:block-container overflow="hidden">
																							<fo:block text-align="left">
																								<xsl:for-each select="NAME">
																									<altova:inline-container-substitute>
																										<xsl:apply-templates/>
																									</altova:inline-container-substitute>
																								</xsl:for-each>
																								<altova:line-break/>
																								<xsl:for-each select="DEPARTMENT">
																									<altova:inline-container-substitute>
																										<xsl:apply-templates/>
																									</altova:inline-container-substitute>
																								</xsl:for-each>
																								<xsl:for-each select="STREET">
																									<altova:inline-container-substitute>
																										<xsl:apply-templates/>
																									</altova:inline-container-substitute>
																								</xsl:for-each>
																								<altova:line-break/>
																								<xsl:for-each select="ZIP">
																									<altova:inline-container-substitute>
																										<xsl:apply-templates/>
																									</altova:inline-container-substitute>
																								</xsl:for-each>
																								<fo:inline>
																									<xsl:text>&#160;</xsl:text>
																								</fo:inline>
																								<xsl:value-of select="../../NAME"/>
																							</fo:block>
																						</fo:block-container>
																					</fo:table-cell>
																				</xsl:for-each>
																			</xsl:for-each>
																		</fo:table-row>
																	</fo:table-body>
																</fo:table>
															</xsl:variable>
															<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
															<altova:line-break/>
															<fo:inline>
																<xsl:text>Tel:</xsl:text>
															</fo:inline>
															<xsl:for-each select="PHONE">
																<altova:inline-container-substitute>
																	<xsl:apply-templates/>
																</altova:inline-container-substitute>
															</xsl:for-each>
															<altova:line-break/>
															<fo:inline>
																<xsl:text>Fax:</xsl:text>
															</fo:inline>
															<xsl:for-each select="FAX">
																<altova:inline-container-substitute>
																	<xsl:apply-templates/>
																</altova:inline-container-substitute>
															</xsl:for-each>
														</fo:block>
													</fo:block-container>
												</fo:table-cell>
											</fo:table-row>
										</fo:table-body>
									</fo:table>
								</xsl:variable>
								<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="altova:double-backslash">
		<xsl:param name="text"/>
		<xsl:param name="text-length"/>
		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
		<xsl:choose>
			<xsl:when test="$text-after-bs-length = 0">
				<xsl:choose>
					<xsl:when test="substring($text, $text-length) = '\'">
						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$text"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
				<xsl:call-template name="altova:double-backslash">
					<xsl:with-param name="text" select="$text-after-bs"/>
					<xsl:with-param name="text-length" select="$text-after-bs-length"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:MakeValueAbsoluteIfPixels">
		<xsl:param name="sValue"/>
		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>
		<xsl:choose>
			<xsl:when test="$sBeforePx">
				<xsl:variable name="nLengthOfInteger">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="$sBeforePx"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>
				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>
				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>
				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>
				<xsl:variable name="sRest">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$sValue"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">
		<xsl:param name="sText"/>
		<xsl:variable name="sLen" select="string-length($sText)"/>
		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>
		<xsl:choose>
			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">
				<xsl:variable name="nResultOfRest">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$nResultOfRest + 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>0</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:variable name="altova:toc-xslt-tree1">
		<xsl:for-each select="$altova:design-xslt-tree-view-before-toc">
			<xsl:apply-templates mode="altova:generate-toc-xslt-tree"/>
		</xsl:for-each>
	</xsl:variable>
	<xsl:template match="altova:level" mode="altova:generate-toc-xslt-tree">
		<altova:level altova:design-id="{generate-id()}">
			<xsl:apply-templates mode="#current"/>
		</altova:level>
	</xsl:template>
	<xsl:template match="altova:marker" mode="altova:generate-toc-xslt-tree">
		<altova:marker altova:design-id="{generate-id()}" altova:name="{@altova:name}">
			<xsl:apply-templates mode="#current"/>
		</altova:marker>
	</xsl:template>
	<xsl:template match="@* | text()" mode="altova:generate-toc-xslt-tree"/>
	<xsl:template match="altova:pdf-bookmark-tree[@generate-from-toc = true()]" mode="altova:generate-toc-xslt-tree">
		<altova:pdf-bookmark-tree altova:design-id="{generate-id()}">
			<fo:bookmark-tree>
				<xsl:apply-templates select="ancestor::*[self::altova:result-document | self::altova:main-document][1]//altova:toc except ancestor::*[self::altova:result-document | self::altova:main-document][1]//altova:result-document//altova:toc" mode="altova:generate-bookmark-tree"/>
			</fo:bookmark-tree>
		</altova:pdf-bookmark-tree>
	</xsl:template>
	<xsl:template match="fo:inline/text()" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="altova:num-lvl" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:attribute name="altova:level-design-id" select="$altova:level-design-id"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="altova:num-seq" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:attribute name="altova:marker-design-id" select="generate-id( ancestor::altova:marker[1] )"/>
		</xsl:copy>
	</xsl:template>
	<xsl:variable name="altova:toc-xslt-tree" select="$altova:toc-xslt-tree1"/>
	<xsl:key name="altova:toc-xslt-tree-key" match="altova:level | altova:toc | altova:ref | altova:marker | altova:pdf-bookmark-tree" use="@altova:design-id"/>
	<xsl:variable name="altova:design-xslt-tree-view">
		<xsl:for-each select="$altova:design-xslt-tree-view-before-toc">
			<xsl:apply-templates mode="altova:generate-xslt-tree-view"/>
		</xsl:for-each>
	</xsl:variable>
	<xsl:template match="@* | node()" mode="altova:generate-xslt-tree-view">
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="altova:level" mode="altova:generate-xslt-tree-view">
		<xsl:apply-templates select="node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:pdf-bookmark-tree | altova:toc | altova:ref" mode="altova:generate-xslt-tree-view">
		<xsl:apply-templates select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', generate-id( current() ) )/node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:marker" mode="altova:generate-xslt-tree-view">
		<fo:wrapper id="{generate-id()}"/>
		<xsl:apply-templates select="node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:num-lvl" mode="altova:generate-xslt-tree-view">
		<xsl:variable name="altova:format" select="@altova:format"/>
		<xsl:variable name="altova:omit-levels" select="@altova:omit-levels"/>
		<xsl:variable name="altova:level-design-id">
			<xsl:choose>
				<xsl:when test="@altova:level-design-id">
					<xsl:value-of select="@altova:level-design-id"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="generate-id( ancestor::altova:level[1] )"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', $altova:level-design-id )">
			<xsl:choose>
				<xsl:when test="$altova:omit-levels">
					<xsl:number level="multiple" count="altova:level[ count( ancestor::altova:level ) >= $altova:omit-levels ]" format="{$altova:format}"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:number level="multiple" count="altova:level" format="{$altova:format}"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="altova:num-seq" mode="altova:generate-xslt-tree-view">
		<xsl:variable name="altova:format" select="@altova:format"/>
		<xsl:variable name="altova:marker-design-id">
			<xsl:choose>
				<xsl:when test="@altova:marker-design-id">
					<xsl:value-of select="@altova:marker-design-id"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="generate-id( ancestor::altova:marker[1] )"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', $altova:marker-design-id )">
			<xsl:variable name="altova:name" select="@altova:name"/>
			<xsl:number level="any" count="altova:marker[ @altova:name = $altova:name ]" format="{$altova:format}"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="fo:bookmark-tree" mode="altova:generate-xslt-tree-view">
		<xsl:if test="*[1] or @*[1]">
			<xsl:copy copy-namespaces="no">
				<xsl:apply-templates mode="#current"/>
			</xsl:copy>
		</xsl:if>
	</xsl:template>
	<xsl:template match="@* | node()" mode="altova:copy-table">
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="fo:table" mode="altova:copy-table">
		<xsl:choose>
			<xsl:when test="(empty(fo:table-body/fo:table-row) and empty(fo:table-header/fo:table-row) and empty(fo:table-footer/fo:table-row)) or empty(.//fo:table-cell)">				</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="fo:table-header | fo:table-footer" mode="altova:copy-table">
		<xsl:choose>
			<xsl:when test="empty(fo:table-row)">				</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="."/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="fo:table-body" mode="altova:copy-table">
		<xsl:choose>
			<xsl:when test="empty(fo:table-row)">
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
					<fo:table-row>
						<fo:table-cell>
							<fo:block/>
						</fo:table-cell>
					</fo:table-row>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="."/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="fo:list-item[empty(@break-before)]" mode="second-step">
		<xsl:copy>
			<xsl:choose>
				<xsl:when test=".//altova:page-break">
					<xsl:attribute name="break-before" select="'page'"/>
				</xsl:when>
				<xsl:when test=".//altova:column-break">
					<xsl:attribute name="break-before" select="'column'"/>
				</xsl:when>
			</xsl:choose>
			<xsl:apply-templates select="@* | node()" mode="#current"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="altova:pdf-bookmark-tree[@generate-from-toc = false()]" mode="second-step">
		<xsl:variable name="altova:pdf-bookmarks">
			<xsl:apply-templates mode="altova:filter-pdf-bookmark-tree"/>
		</xsl:variable>
		<xsl:if test="exists($altova:pdf-bookmarks/fo:bookmark)">
			<fo:bookmark-tree>
				<xsl:copy-of select="$altova:pdf-bookmarks"/>
			</fo:bookmark-tree>
		</xsl:if>
	</xsl:template>
	<xsl:template match="altova:pdf-bookmark-tree[@generate-from-toc = false()]" mode="altova:generate-xslt-tree-view">
		<xsl:copy-of select="."/>
	</xsl:template>
	<xsl:template match="node()" mode="altova:filter-pdf-bookmark-tree">
		<xsl:apply-templates mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:pdf-bookmark" mode="altova:filter-pdf-bookmark-tree">
		<fo:bookmark>
			<xsl:sequence select="@starting-state"/>
			<xsl:variable name="altova:hyperlink" select="altova:hyperlink[1]"/>
			<xsl:choose>
				<xsl:when test="not(exists($altova:hyperlink))">
					<xsl:message select="'Error: Found PDF bookmark without a corresponding hyperlink!'" terminate="yes"/>
					<xsl:attribute name="internal-destination" select="'undefined'"/>
					<fo:bookmark-title/>
				</xsl:when>
				<xsl:when test="not(starts-with($altova:hyperlink/@href,'#'))">
					<xsl:message select="concat('Error: External bookmark destinations (',$altova:hyperlink/@href,') are not supported by FOP 0.93/1.0!')" terminate="yes"/>
					<xsl:attribute name="internal-destination" select="'external-destination-not-supported'"/>
					<fo:bookmark-title>
						<xsl:sequence select="$altova:hyperlink//@color[1] | $altova:hyperlink//@font-style[.='normal' or .='italic'][1] | $altova:hyperlink//@font-weight[.='normal' or .='bold'][1]"/>
						<xsl:value-of select="string($altova:hyperlink)"/>
					</fo:bookmark-title>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="altova:bookmark-name" select="substring($altova:hyperlink/@href,2)"/>
					<xsl:variable name="altova:source-document" select="ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
					<xsl:variable name="altova:target-document" select="key('altova:bookmark-key',$altova:bookmark-name,$altova:design-xslt-tree-view)[1]/ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
					<xsl:choose>
						<xsl:when test="empty($altova:target-document) or $altova:source-document is $altova:target-document">
							<xsl:attribute name="internal-destination" select="$altova:bookmark-name"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="altova:relative-path" select="altova:calc-relative-path($altova:source-document/@url,$altova:target-document/@url)"/>
							<xsl:variable name="altova:url" select="concat(substring($altova:relative-path,1,string-length($altova:relative-path) - 3),'.pdf#dest=',$altova:bookmark-name)"/>
							<xsl:message select="concat('Warning: External bookmark destinations (',$altova:url,') are not supported by FOP 0.93/1.0!')"/>
							<xsl:attribute name="internal-destination" select="'external-destination-not-supported'"/>
						</xsl:otherwise>
					</xsl:choose>
					<fo:bookmark-title>
						<xsl:sequence select="$altova:hyperlink//@color[1] | $altova:hyperlink//@font-style[.='normal' or .='italic'][1] | $altova:hyperlink//@font-weight[.='normal' or .='bold'][1]"/>
						<xsl:value-of select="string($altova:hyperlink)"/>
					</fo:bookmark-title>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:if test="count(altova:hyperlink) gt 1">
				<xsl:message select="concat('Error: Found PDF bookmark (',$altova:hyperlink/@href,') with more than one corresponding hyperlinks!')" terminate="yes"/>
			</xsl:if>
			<xsl:apply-templates mode="#current"/>
		</fo:bookmark>
	</xsl:template>
	<xsl:template match="fo:basic-link" mode="second-step">
		<xsl:choose>
			<xsl:when test="count(node()) eq 1 and fo:block">
				<fo:block>
					<xsl:apply-templates select="fo:block[1]/@*" mode="#current"/>
					<fo:basic-link>
						<xsl:apply-templates select="@*" mode="#current"/>
						<xsl:apply-templates select="fo:block[1]/node()" mode="#current"/>
					</fo:basic-link>
				</fo:block>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:is-node-empty" as="xs:boolean">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::altova:inline-container-substitute ) or boolean( $altova:child/self::fo:inline ) or boolean( $altova:child/self::fo:inline-container ) or boolean( $altova:child/self::fo:block-container ) or boolean( $altova:child/self::fo:block ) or boolean( $altova:child/self::fo:basic-link ) ) and altova:is-node-empty( $altova:child ) ) )"/>
	</xsl:function>
	<xsl:template match="/">
		<xsl:apply-templates select="$altova:design-xslt-tree-view" mode="second-step"/>
	</xsl:template>
	<xsl:template match="altova:result-document" mode="second-step">
		<xsl:result-document href="{@url}">
			<xsl:apply-templates mode="#current"/>
		</xsl:result-document>
	</xsl:template>
	<xsl:template match="altova:bookmark" mode="second-step">
		<xsl:variable name="bookmark-content">
			<altova:bookmark>
				<xsl:apply-templates select="node()" mode="#current"/>
			</altova:bookmark>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="altova:is-node-empty($bookmark-content/altova:bookmark)">
				<fo:block>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:copy-of select="$bookmark-content/altova:bookmark/node()"/>
				</fo:block>
			</xsl:when>
			<xsl:otherwise>
				<fo:inline>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:copy-of select="$bookmark-content/altova:bookmark/node()"/>
				</fo:inline>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:key name="altova:bookmark-key" match="altova:bookmark" use="@name"/>
	<xsl:template match="altova:bookmark/@name" mode="second-step">
		<xsl:attribute name="id" select="."/>
	</xsl:template>
	<xsl:template match="altova:hyperlink" mode="second-step">
		<fo:basic-link>
			<xsl:apply-templates select="@* | node()" mode="#current"/>
		</fo:basic-link>
	</xsl:template>
	<xsl:template match="altova:hyperlink/@href" mode="second-step">
		<xsl:choose>
			<xsl:when test="not(string(.))">
				<xsl:attribute name="external-destination" select="'url()'"/>
			</xsl:when>
			<xsl:when test="starts-with(.,'#')">
				<xsl:variable name="altova:bookmark-name" select="substring(.,2)"/>
				<xsl:variable name="altova:source-document" select="ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
				<xsl:variable name="altova:target-document" select="key('altova:bookmark-key',$altova:bookmark-name,$altova:design-xslt-tree-view)[1]/ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
				<xsl:choose>
					<xsl:when test="empty($altova:target-document) or $altova:source-document is $altova:target-document">
						<xsl:attribute name="internal-destination" select="$altova:bookmark-name"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="altova:relative-path" select="altova:calc-relative-path($altova:source-document/@url,$altova:target-document/@url)"/>
						<xsl:variable name="altova:url" select="concat(substring($altova:relative-path,1,string-length($altova:relative-path) - 3),'.pdf#dest=',$altova:bookmark-name)"/>
						<xsl:variable name="altova:escaped-url">
							<xsl:call-template name="altova:double-backslash">
								<xsl:with-param name="text" select="$altova:url"/>
								<xsl:with-param name="text-length" select="string-length($altova:url)"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:attribute name="external-destination" select="concat('url(',$altova:escaped-url,')')"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="altova:escaped-url">
					<xsl:choose>
						<xsl:when test="starts-with(.,'\\') or substring(.,2,1)=':'">
							<xsl:value-of select="iri-to-uri(concat('file:///',translate(.,'\','/')))"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="iri-to-uri(.)"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:attribute name="external-destination" select="concat('url(',$altova:escaped-url,')')"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="altova:inline-container-substitute" mode="second-step">
		<xsl:choose>
			<xsl:when test="altova:IsInline(.)">
				<fo:inline>
					<xsl:copy-of select="@* except @altova-DisableOutputEscaping"/>
					<xsl:apply-templates mode="second-step"/>
				</fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<fo:block>
					<xsl:copy-of select="@* except @altova-DisableOutputEscaping"/>
					<xsl:apply-templates mode="second-step"/>
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:IsInline" as="xs:boolean">
		<xsl:param name="nodePassed" as="node()"/>
		<xsl:choose>
			<xsl:when test="(empty(for $i in $nodePassed/child::node() return index-of(('fo:block', 'fo:block-container', 'fo:list-block', 'fo:table'), name($i))) and (every $i in $nodePassed/altova:inline-container-substitute satisfies altova:IsInline($i))) or name($nodePassed/../..) eq 'fo:list-item-body'">
				<xsl:sequence select="true()"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="false()"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:template match="altova:main-document" mode="second-step">
		<xsl:apply-templates mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:basic-link-container" mode="second-step">
		<fo:block text-align-last="justify">
			<xsl:apply-templates mode="second-step"/>
		</fo:block>
	</xsl:template>
	<xsl:template match="altova:page-break" mode="second-step">
		<xsl:if test="empty(ancestor::fo:list-item)">
			<fo:block break-after="page"/>
		</xsl:if>
	</xsl:template>
	<xsl:template match="altova:line-break" mode="second-step">
		<xsl:variable name="name-following-sibling" select="name(following-sibling::*[1])"/>
		<xsl:variable name="name-preceding-sibling" select="name(preceding-sibling::*[1])"/>
		<xsl:if test="($name-following-sibling and $name-following-sibling != 'fo:table' and $name-following-sibling != 'altova:line-break' and $name-preceding-sibling != 'altova:basic-link-container') or $name-preceding-sibling = 'altova:line-break'">
			<fo:block>
				<xsl:if test="($name-preceding-sibling != 'altova:inline-container-substitute' and $name-preceding-sibling != 'fo:inline' and $name-preceding-sibling != 'fo:basic-link' and $name-preceding-sibling != 'altova:bookmark' and $name-preceding-sibling != 'altova:hyperlink') or ($name-following-sibling != 'altova:inline-container-substitute' and $name-following-sibling != 'fo:inline' and $name-following-sibling != 'fo:basic-link' and $name-following-sibling != 'altova:bookmark' and $name-following-sibling != 'altova:hyperlink')">
					<fo:leader leader-pattern="space"/>
				</xsl:if>
			</fo:block>
		</xsl:if>
	</xsl:template>
	<xsl:template match="altova:column-break" mode="second-step">
		<xsl:if test="empty(ancestor::fo:list-item)">
			<fo:block break-after="column"/>
		</xsl:if>
	</xsl:template>
	<xsl:function name="altova:calc-relative-path" as="xs:string">
		<xsl:param name="altova:source-path"/>
		<xsl:param name="altova:target-path"/>
		<xsl:choose>
			<xsl:when test="$altova:source-path = $altova:target-path">
				<xsl:sequence select="''"/>
			</xsl:when>
			<xsl:when test="starts-with($altova:target-path,'http:') or starts-with($altova:target-path,'ftp:') or starts-with($altova:target-path,'file:')">
				<xsl:sequence select="$altova:target-path"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="altova:source-parts" select="tokenize($altova:source-path,'[/\\]')"/>
				<xsl:variable name="altova:target-parts" select="tokenize($altova:target-path,'[/\\]')"/>
				<xsl:variable name="altova:common-part-count" select="sum(for $i in (1 to count($altova:source-parts) - 1) return if( subsequence($altova:source-parts,1,$i) = subsequence($altova:target-parts,1,$i) ) then 1 else 0)"/>
				<xsl:sequence select="string-join((for $i in ($altova:common-part-count + 1 to count($altova:source-parts) - 1) return '..',for $i in ($altova:common-part-count + 1 to count($altova:target-parts)) return $altova:target-parts[$i]),'/')"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:map-preview-filepath" as="xs:string">
		<xsl:param name="filepath"/>
		<xsl:sequence select="altovaext:create-temp-file-mapping($filepath)" use-when="function-available('altovaext:create-temp-file-mapping',1)"/>
		<xsl:sequence select="$filepath" use-when="not(function-available('altovaext:create-temp-file-mapping',1))"/>
	</xsl:function>
	<xsl:template match="*|@*|comment()|processing-instruction()" mode="second-step">
		<xsl:copy>
			<xsl:apply-templates select="node()|@* except @altova-DisableOutputEscaping" mode="second-step"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="text()" mode="second-step">
		<xsl:choose>
			<xsl:when test="../@altova-DisableOutputEscaping">
				<xsl:value-of select="." disable-output-escaping="yes"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="altova:number" mode="second-step">
		<xsl:number level="single" count="altova:dummy-list-item | fo:list-item" format="{@format}" from="fo:list-block"/>
	</xsl:template>
	<xsl:template match="altova:dummy-list-item" mode="second-step">		</xsl:template>
	<xsl:function name="altova:AddCompositeStyles">
		<xsl:param name="altova:sStyleList" as="xs:string?"/>
		<xsl:variable name="altova:seqStyles" select="tokenize($altova:sStyleList, ';')" as="xs:string*"/>
		<xsl:for-each select="$altova:seqStyles">
			<xsl:variable name="altova:sStyleName" select="normalize-space(substring-before(., ':'))" as="xs:string?"/>
			<xsl:variable name="altova:sStyleValue" as="xs:string?">
				<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
					<xsl:with-param name="sValue" select="normalize-space(substring-after(., ':'))"/>
				</xsl:call-template>
			</xsl:variable>
			<xsl:if test="$altova:sStyleName and $altova:sStyleValue">
				<xsl:attribute name="{$altova:sStyleName}" select="$altova:sStyleValue"/>
			</xsl:if>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:AddDynamicClassStyles">
		<xsl:param name="altova:sClassName" as="xs:string?"/>
		<xsl:variable name="nodeRule" select="$altova:nodeCssClasses/Class[@sSelector eq $altova:sClassName and ($altova:sCssSwitch eq '' or @sFile eq $altova:sCssSwitch)]" as="node()*"/>
		<xsl:if test="$nodeRule">
			<xsl:copy-of select="$nodeRule/Styles/@*"/>
		</xsl:if>
	</xsl:function>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="substring-before($normLength, 'px')"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * $altova:nPxPerIn"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * $altova:nPxPerIn div 2.54"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'mm')) * $altova:nPxPerIn div 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * $altova:nPxPerIn div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * $altova:nPxPerIn div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$normLength"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'px')) div $altova:nPxPerIn * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * 10"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="substring-before($normLength, 'mm') "/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * 25.4 div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * 25.4 div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number($normLength) div $altova:nPxPerIn * 25.4"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="sps:getTitleNumber" as="xs:integer">
		<xsl:param name="itemTitle" as="xs:string"/>
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:sequence select="count( distinct-values($XML/COURSE-LIST/COURSE[TITLE &lt;=$itemTitle]/TITLE) )"/>
	</xsl:function>
	<xsl:function name="sps:getSubtitleNumber" as="xs:string">
		<xsl:param name="itemTitle" as="xs:string"/>
		<xsl:param name="itemSubtitle" as="xs:string"/>
		<xsl:param name="itemId" as="xs:integer"/>
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:sequence select="$XML3/Number-List/Number[Integer=count(distinct-values($XML/COURSE-LIST/COURSE[TITLE = $itemTitle and SUBTITLE &lt; $itemSubtitle]/@id)) + count(distinct-values($XML/COURSE-LIST/COURSE[TITLE = $itemTitle and SUBTITLE = $itemSubtitle and @id &lt;= $itemId]/@id))]/SRoman"/>
	</xsl:function>
	<xsl:function name="sps:getCalendarWidth" as="xs:string">
		<xsl:param name="cityCount" as="xs:integer"/>
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:sequence select="if ( $cityCount &gt;= 3 ) then &apos;60%&apos; else if ($cityCount = 2) then &apos;40%&apos; else &apos;20%&apos;"/>
	</xsl:function>
	<xsl:function name="sps:getCountryName">
		<xsl:param name="country" as="xs:string"/>
		<xsl:param name="language" as="xs:string"/>
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:sequence select="$XML5/COUNTRY-LIST/COUNTRY[NAME=$country]/NAME[@language=$language]"/>
	</xsl:function>
	<xsl:function name="sps:getLocationGroups">
		<xsl:param name="locationGroups" as="xs:string"/>
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:sequence select="fn:tokenize($locationGroups, &quot;,&quot;)"/>
	</xsl:function>
	<xsl:variable name="altova:nDefaultFontSizePt" as="xs:integer" select="12"/>
	<xsl:variable name="altova:nCmPerIn" as="xs:double" select="2.54"/>
	<xsl:variable name="altova:nPercentPerEm" as="xs:integer" select="100"/>
	<xsl:variable name="altova:nPercentPerEx" as="xs:integer" select="50"/>
	<xsl:variable name="altova:nPtPerPc" as="xs:integer" select="12"/>
	<xsl:variable name="altova:nPtPerIn" as="xs:integer" select="72"/>
	<xsl:function name="altova:MapLengthUnitEmExPercentToPointsUnrounded" as="xs:double">
		<xsl:param name="sLength" as="xs:string"/>
		<xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, true(), true())"/>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitEmExPercentToPointsUnrounded_AbsentOk" as="xs:double">
		<xsl:param name="sLength" as="xs:string?"/>
		<xsl:choose>
			<xsl:when test="not($sLength)">0</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="altova:MapLengthUnitEmExPercentToPointsUnrounded($sLength)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitEmExToPointsUnrounded" as="xs:double">
		<xsl:param name="sLength" as="xs:string"/>
		<xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, true(), false())"/>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitEmExToPointsUnrounded_AbsentOk" as="xs:double">
		<xsl:param name="sLength" as="xs:string?"/>
		<xsl:choose>
			<xsl:when test="not($sLength)">0</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="altova:MapLengthUnitEmExToPointsUnrounded($sLength)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitPercentToPointsUnrounded" as="xs:double">
		<xsl:param name="sLength" as="xs:string"/>
		<xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, false(), true())"/>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitPercentToPointsUnrounded_AbsentOk" as="xs:double">
		<xsl:param name="sLength" as="xs:string?"/>
		<xsl:choose>
			<xsl:when test="not($sLength)">0</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="altova:MapLengthUnitPercentToPointsUnrounded($sLength)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitToPointsUnrounded" as="xs:double">
		<xsl:param name="sLength" as="xs:string"/>
		<xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, false(), false())"/>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitToPointsUnrounded_AbsentOk" as="xs:double">
		<xsl:param name="sLength" as="xs:string?"/>
		<xsl:choose>
			<xsl:when test="not($sLength)">0</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="altova:MapLengthUnitToPointsUnrounded($sLength)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitToPointsUnroundedCore" as="xs:double">
		<xsl:param name="sLength" as="xs:string"/>
		<xsl:param name="bAcceptEmEx" as="xs:boolean"/>
		<xsl:param name="bAcceptPercent" as="xs:boolean"/>
		<xsl:variable name="sLengthNormalized" as="xs:string" select="normalize-space($sLength)"/>
		<xsl:choose>
			<xsl:when test="matches($sLengthNormalized, '^\d+(\.\d+)?[a-zA-Z%]+$')">
				<xsl:variable name="nValue" select="number(replace($sLengthNormalized, '([a-zA-Z%])+', ''))"/>
				<xsl:variable name="sUnit" select="replace($sLengthNormalized, '(\d+(\.\d+)?)', '')"/>
				<xsl:choose>
					<xsl:when test="$sUnit = 'cm'">
						<xsl:value-of select="altova:MapUnitCmToPt($nValue)"/>
					</xsl:when>
					<xsl:when test="$sUnit = 'in'">
						<xsl:value-of select="altova:MapUnitInToPt($nValue)"/>
					</xsl:when>
					<xsl:when test="$sUnit = 'mm'">
						<xsl:value-of select="altova:MapUnitMmToPt($nValue)"/>
					</xsl:when>
					<xsl:when test="$sUnit = 'pc'">
						<xsl:value-of select="altova:MapUnitPcToPt($nValue)"/>
					</xsl:when>
					<xsl:when test="$sUnit = 'pt'">
						<xsl:value-of select="$nValue"/>
					</xsl:when>
					<xsl:when test="$sUnit = 'px'">
						<xsl:value-of select="altova:MapUnitPxToPt($nValue)"/>
					</xsl:when>
					<xsl:when test="$sUnit = 'em' and $bAcceptEmEx = true()">
						<xsl:value-of select="altova:MapUnitEmToPt($nValue)"/>
					</xsl:when>
					<xsl:when test="$sUnit = 'ex' and $bAcceptEmEx = true()">
						<xsl:value-of select="altova:MapUnitExToPt($nValue)"/>
					</xsl:when>
					<xsl:when test="$sUnit = '%' and $bAcceptPercent = true()">
						<xsl:value-of select="altova:MapUnitPercentToPt($nValue)"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="-1"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="-1"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitToPointsWithUnit" as="xs:string">
		<xsl:param name="sLength" as="xs:string"/>
		<xsl:variable name="dPoints" as="xs:double" select="altova:MapLengthUnitToPointsUnroundedCore($sLength, false(), false())"/>
		<xsl:sequence select="concat(xs:string(round($dPoints * 100) div 100), 'pt')"/>
	</xsl:function>
	<xsl:function name="altova:MapLengthUnitToPointsWithUnit_AbsentOk" as="xs:string">
		<xsl:param name="sLength" as="xs:string?"/>
		<xsl:choose>
			<xsl:when test="not($sLength)">0</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="altova:MapLengthUnitToPointsWithUnit($sLength)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:MapUnitCmToPt" as="xs:double">
		<xsl:param name="dCm" as="xs:double"/>
		<xsl:sequence select="altova:MapUnitInToPt($dCm div $altova:nCmPerIn)"/>
	</xsl:function>
	<xsl:function name="altova:MapUnitEmToPt" as="xs:double">
		<xsl:param name="dEm" as="xs:double"/>
		<xsl:sequence select="altova:MapUnitPercentToPt($dEm * $altova:nPercentPerEm)"/>
	</xsl:function>
	<xsl:function name="altova:MapUnitExToPt" as="xs:double">
		<xsl:param name="dEx" as="xs:double"/>
		<xsl:sequence select="altova:MapUnitPercentToPt($dEx * $altova:nPercentPerEx)"/>
	</xsl:function>
	<xsl:function name="altova:MapUnitInToPt" as="xs:double">
		<xsl:param name="dIn" as="xs:double"/>
		<xsl:sequence select="$dIn * $altova:nPtPerIn"/>
	</xsl:function>
	<xsl:function name="altova:MapUnitMmToPt" as="xs:double">
		<xsl:param name="dMm" as="xs:double"/>
		<xsl:sequence select="altova:MapUnitCmToPt($dMm div 10)"/>
	</xsl:function>
	<xsl:function name="altova:MapUnitPcToPt" as="xs:double">
		<xsl:param name="dPc" as="xs:double"/>
		<xsl:sequence select="$dPc * $altova:nPtPerPc"/>
	</xsl:function>
	<xsl:function name="altova:MapUnitPercentToPt" as="xs:double">
		<xsl:param name="dPercent" as="xs:double"/>
		<xsl:sequence select="$dPercent div 100 * $altova:nDefaultFontSizePt"/>
	</xsl:function>
	<xsl:function name="altova:MapUnitPxToPt" as="xs:double">
		<xsl:param name="dPx" as="xs:double"/>
		<xsl:sequence select="$dPx div $altova:nPxPerIn * $altova:nPtPerIn"/>
	</xsl:function>
	<xsl:function name="altova:Sqrt" as="xs:double">
		<xsl:param name="nValue" as="xs:double"/>
		<xsl:sequence select="altova:SqrtRecursive($nValue, $nValue)"/>
	</xsl:function>
	<xsl:function name="altova:SqrtRecursive" as="xs:double">
		<xsl:param name="nValue" as="xs:double"/>
		<xsl:param name="nApprox" as="xs:double"/>
		<xsl:choose>
			<xsl:when test="abs($nApprox * $nApprox - $nValue) lt 0.01">
				<xsl:sequence select="$nApprox"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="altova:SqrtRecursive($nValue, ($nValue div $nApprox + $nApprox) div 2)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
</xsl:stylesheet>
