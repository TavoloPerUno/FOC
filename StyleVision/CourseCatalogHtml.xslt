<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2014 rel. 2 sp1 (x64) - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:map="http://www.w3.org/2005/xpath-functions/map" xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="#all">
	<xsl:import href="C:\Users\Manoradhan M\Desktop\Projects\Catalogs\Catalogs\StyleCatalogs\25 Aug\XSLT\groupingInXSLT1.xslt"/>
	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" use-character-maps="spaces" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>
	<xsl:character-map name="spaces">
		<xsl:output-character character="&#160;" string="&amp;nbsp;"/>
	</xsl:character-map>
	<xsl:param name="altova:bGeneratingFromPxf" select="false()"/>
	<xsl:param name="SV_OutputFormat" select="'HTML'"/>
	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">
		<xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>
	</xsl:param>
	<xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;CourseCatalog&apos;" as="xs:string?"/>
	<xsl:param name="language" select="'de'"/>
	<xsl:param name="locationGroups" select="'3'"/>
	<xsl:param name="XML2"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:param name="XML3"/>
	<xsl:param name="XML4"/>
	<xsl:param name="XML5"/>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:import-schema schema-location="file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/25%20Aug/XML%20Schema/Translation-List.xsd" use-when="system-property('xsl:is-schema-aware')='yes'"/>
	<xsl:import-schema schema-location="file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/25%20Aug/XML%20Schema/CourseList.xsd" use-when="system-property('xsl:is-schema-aware')='yes'"/>
	<xsl:import-schema schema-location="file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/25%20Aug/XML%20Schema/Number-List.xsd" use-when="system-property('xsl:is-schema-aware')='yes'"/>
	<xsl:import-schema schema-location="file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/1%20Sept/XML%20Schema/LocationList.xsd" use-when="system-property('xsl:is-schema-aware')='yes'"/>
	<xsl:import-schema schema-location="file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/1%20Sept/XML%20Schema/Country-List.xsd" use-when="system-property('xsl:is-schema-aware')='yes'"/>
	<xsl:variable name="altova:CssImages">
		<altova:CssImage altova:sUrl="file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/25%20Aug/Images/greenGradient.png"/>
	</xsl:variable>
	<xsl:key name="altova:id-key" match="document-node()|node()|@*" use="generate-id()"/>
	<xsl:variable name="altova:DesignAfterStep1">
		<altova:main-document url="{if ($SV_BaseOutputFileName) then concat($SV_BaseOutputFileName,'.html') else ''}">
			<xsl:variable name="XML2" select="document($XML2)"/>
			<xsl:variable name="XML3" select="document($XML3)"/>
			<xsl:variable name="XML4" select="document($XML4)"/>
			<xsl:variable name="XML5" select="document($XML5)"/>
			<html>
				<head>
					<title/>
					<meta name="generator" content="Altova StyleVision Enterprise Edition 2014 rel. 2 sp1 (x64) (http://www.altova.com)"/>
					<meta http-equiv="X-UA-Compatible" content="IE=9"/>
					<style type="text/css">
						<xsl:comment>body { font-family:Verdana, Geneva, sans-serif;
font-size:12pt;
line-height:170%;
margin-top:0pt;
 }
 h1 { font-size:20pt;
 }
 h2 { background-image:url(file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/25%20Aug/Images/greenGradient.png);
background-repeat:repeat;
color:white;
display:block;
font-size:18pt;
line-height:150%;
margin-bottom:0pt;
margin-left:0pt;
margin-right:0pt;
margin-top:0pt;
padding-bottom:2pt;
padding-left:15pt;
padding-right:inherit;
padding-top:2pt;
 }
 h3 { font-size:16pt;
font-weight:bold;
margin-top:0pt;
 }
 h4 { color:#618f05;
font-size:14pt;
font-weight:bold;
 }
 p { font-size:10pt;
line-height:12pt;
text-align:justify;
 }
 .length { font-style:italic;
 }
 b { font-weight:bold;
 }
 label { font-weight:bold;
 }
 div { font-size:12px;
line-height:171%;
 }
 td { font-family:Verdana;
font-size:10pt;
 }
 h5 { font-size:12pt;
 }
 a { color:black;
 }
 .caption { font-weight:bold;
 }
 .keepTogether { keep-together:always;
 }
 .TOCBlock { font-family:Verdana, Geneva, sans-serif;
line-height:171%;
 }
 .subtitleBorder { background-color:#e1e1e1;
 }
 .HTMLh2 { background-image:url(file:///C:/Users/Manoradhan%20M/Desktop/Projects/Catalogs/Catalogs/StyleCatalogs/25%20Aug/Images/greenGradient.png);
background-size:cover;
border-top-left-radius:9pt;
border-top-right-radius:9pt;
box-shadow:1px 1px 2px #000;
color:white;
display:block;
font-size:18pt;
line-height:150%;
margin:0;
margin-top:2pt;
padding-bottom:2pt;
padding-left:15pt;
padding-right:inherit;
padding-top:2pt;
width:100%;
 }
 .HTMLBorder { background:white;
border:1pt solid #A9A9A9;
border-bottom-left-radius:12pt;
border-bottom-right-radius:12pt;
box-shadow:1px 1px 2px #000;
display:block;
line-height:171%;
margin-bottom:10pt;
margin-right:5pt;
padding-bottom:2pt;
padding-left:13pt;
padding-right:inherit;
padding-top:2pt;
width:100%;
 }
 .cityHeader { background-color:#B2C675;
color:Black;
font-size:10pt;
margin-top:2pt;
padding:.2em;
 }
 .dateCell { border-bottom-color:#B2C675;
border-bottom-style:solid;
border-bottom-width:1pt;
border-left-color:#B2C675;
border-left-style:solid;
border-left-width:1pt;
border-right-color:#B2C675;
border-right-style:solid;
border-right-width:1pt;
display:block;
font-family:Verdana, Geneva, sans-serif;
font-size:9pt;
margin:0pt;
text-align:center;
width:auto;
 }
 .htmlTable { display:inline-table;
float:right;
 }
 .inline { display:inline;
float:inherit;
 }
 .super { font-size:4pt;
vertical-align:super;
 }
 .emphasis { font-weight:bold;
 }
 .cityThumbnail { height:.55in;
width:.63in;
 }</xsl:comment>
					</style>
					<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
					<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>
					<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>
					<xsl:comment>&lt;![endif]</xsl:comment>
					<style type="text/css">@page { margin-left:0.50in; margin-right:0.50in; margin-top:.8in; margin-bottom:0.8in } @media print { br.altova-page-break { page-break-before: always; } }</style>
				</head>
				<body>
					<xsl:for-each select="$XML">
						<br/>
						<h1 style="text-align:center; ">
							<xsl:choose>
								<xsl:when test="$language = &apos;en&apos;">
									<span>
										<xsl:text>Course Catalog</xsl:text>
									</span>
								</xsl:when>
								<xsl:when test="$language = &apos;de&apos;">
									<span>
										<xsl:text>Kurskatalog</xsl:text>
									</span>
								</xsl:when>
							</xsl:choose>
						</h1>
						<br/>
						<br/>
						<p style="text-align:center; ">
							<img>
								<xsl:attribute name="src">
									<xsl:if test="substring(string(&apos;..\Images\Comelio-Logo.png&apos;), 2, 1) = ':'">
										<xsl:text>file:///</xsl:text>
									</xsl:if>
									<xsl:value-of select="translate(string(&apos;..\Images\Comelio-Logo.png&apos;), '&#x5c;', '/')"/>
								</xsl:attribute>
								<xsl:attribute name="alt"/>
							</img>
						</p>
						<br/>
						<p style="text-align:center; ">
							<img border="1">
								<xsl:attribute name="src">
									<xsl:if test="substring(string(&apos;..\Images\Conference Room.JPG&apos;), 2, 1) = ':'">
										<xsl:text>file:///</xsl:text>
									</xsl:if>
									<xsl:value-of select="translate(string(&apos;..\Images\Conference Room.JPG&apos;), '&#x5c;', '/')"/>
								</xsl:attribute>
								<xsl:attribute name="alt"/>
							</img>
						</p>
						<br class="altova-page-break" clear="all"/>
						<br/>
						<div class="TOCBlock">
							<altova:toc altova:name="toc"/>
						</div>
						<br class="altova-page-break" clear="all"/>
						<xsl:call-template name="Locations"/>
						<br/>
						<br class="altova-page-break" clear="all"/>
						<xsl:apply-templates select="COURSE-LIST"/>
						<br/>
						<br class="altova-page-break" clear="all"/>
						<xsl:call-template name="Disclaimer"/>
						<br/>
					</xsl:for-each>
				</body>
			</html>
		</altova:main-document>
	</xsl:variable>
	<xsl:template match="altova:toc[ @altova:name = 'toc' ]" mode="altova:generate-toc-xslt-tree">
		<xsl:variable name="altova:source-document" select="ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
		<altova:toc altova:design-id="{generate-id()}">
			<xsl:variable name="altova:current-level-id" select="generate-id( ancestor::altova:level[1] )"/>
			<h1 style="text-align:center; ">
				<xsl:choose>
					<xsl:when test="$language = &apos;en&apos;">
						<span>
							<xsl:text>Table Of Contents</xsl:text>
						</span>
					</xsl:when>
					<xsl:when test="$language = &apos;de&apos;">
						<span>
							<xsl:text>Inhaltsverzeichnis</xsl:text>
						</span>
					</xsl:when>
				</xsl:choose>
			</h1>
			<xsl:for-each select="ancestor::*[self::altova:level | self::altova:main-document][1]">
				<xsl:for-each select="descendant::altova:level[ ancestor::*[self::altova:level | self::altova:main-document][1] is current() ]">
					<xsl:variable name="altova:current-level-id" select="generate-id()"/>
					<h3>
						<xsl:for-each select="descendant::altova:marker[ @altova:name = 'TOC' and @altova:id = &apos;coTitle&apos; and ancestor::altova:level[1] is current() ]">
							<xsl:variable name="altova:current-marker-id" select="generate-id()"/>
							<a style="text-decoration:none; " href="{concat(altova:calc-relative-path($altova:source-document/@url,ancestor::*[self::altova:result-document | self::altova:main-document][1]/@url),'#',generate-id())}">
								<span style="color:black; font-weight:bold; ">
									<xsl:choose>
										<xsl:when test="@altova:entrytext">
											<xsl:value-of select="@altova:entrytext"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:apply-templates mode="altova:extract-text-from-marker">
												<xsl:with-param name="altova:level-design-id" select="$altova:current-level-id"/>
												<xsl:with-param name="altova:marker-design-id" select="$altova:current-marker-id"/>
											</xsl:apply-templates>
										</xsl:otherwise>
									</xsl:choose>
								</span>
							</a>
						</xsl:for-each>
					</h3>
					<xsl:for-each select="descendant::altova:level[ ancestor::altova:level[1] is current() ]">
						<xsl:variable name="altova:current-level-id" select="generate-id()"/>
						<h4>
							<xsl:for-each select="descendant::altova:marker[ @altova:name = 'TOC' and @altova:id = &apos;coSubtitle&apos; and ancestor::altova:level[1] is current() ]">
								<xsl:variable name="altova:current-marker-id" select="generate-id()"/>
								<a style="text-decoration:none; " href="{concat(altova:calc-relative-path($altova:source-document/@url,ancestor::*[self::altova:result-document | self::altova:main-document][1]/@url),'#',generate-id())}">
									<span>
										<xsl:text>&#160; </xsl:text>
									</span>
									<span style="color:black; font-weight:normal; ">
										<xsl:choose>
											<xsl:when test="@altova:entrytext">
												<xsl:value-of select="@altova:entrytext"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:apply-templates mode="altova:extract-text-from-marker">
													<xsl:with-param name="altova:level-design-id" select="$altova:current-level-id"/>
													<xsl:with-param name="altova:marker-design-id" select="$altova:current-marker-id"/>
												</xsl:apply-templates>
											</xsl:otherwise>
										</xsl:choose>
									</span>
								</a>
							</xsl:for-each>
						</h4>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
		</altova:toc>
	</xsl:template>
	<xsl:template match="COURSE-LIST">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:for-each select="COURSE[sps:getSubtitleNumber( TITLE,SUBTITLE, @id ) = &quot;i&quot;]">
			<xsl:sort select="TITLE" data-type="text" order="ascending"/>
			<xsl:sort select="SUBTITLE" data-type="text" order="ascending"/>
			<xsl:variable name="coTitle" select="TITLE"/>
			<altova:level>
				<altova:marker altova:name="TOC" altova:id="coTitle">
					<xsl:attribute name="altova:entrytext">
						<xsl:value-of select="concat(sps:getTitleNumber( TITLE ), '. ', TITLE)"/>
					</xsl:attribute>
				</altova:marker>
				<xsl:choose>
					<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
						<div style="padding-top:0pt; " class="HTMLh2">
							<xsl:choose>
								<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
									<h2 style="display:inline; float:left; text-align:left; vertical-align:middle; ">
										<span style="text-align:left; ">
											<xsl:value-of select="sps:getTitleNumber( TITLE )"/>
										</span>
										<span>
											<xsl:text>. </xsl:text>
										</span>
										<xsl:for-each select="TITLE">
											<span style="padding:0pt; text-align:left; ">
												<xsl:apply-templates/>
											</span>
										</xsl:for-each>
									</h2>
								</xsl:when>
								<xsl:otherwise>
									<span style="text-align:left; ">
										<xsl:value-of select="sps:getTitleNumber( TITLE )"/>
									</span>
									<span>
										<xsl:text>. </xsl:text>
									</span>
									<xsl:for-each select="TITLE">
										<span style="padding:0pt; text-align:left; ">
											<xsl:apply-templates/>
										</span>
									</xsl:for-each>
								</xsl:otherwise>
							</xsl:choose>
						</div>
					</xsl:when>
					<xsl:otherwise>
						<xsl:choose>
							<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
								<h2 style="display:inline; float:left; text-align:left; vertical-align:middle; ">
									<span style="text-align:left; ">
										<xsl:value-of select="sps:getTitleNumber( TITLE )"/>
									</span>
									<span>
										<xsl:text>. </xsl:text>
									</span>
									<xsl:for-each select="TITLE">
										<span style="padding:0pt; text-align:left; ">
											<xsl:apply-templates/>
										</span>
									</xsl:for-each>
								</h2>
							</xsl:when>
							<xsl:otherwise>
								<span style="text-align:left; ">
									<xsl:value-of select="sps:getTitleNumber( TITLE )"/>
								</span>
								<span>
									<xsl:text>. </xsl:text>
								</span>
								<xsl:for-each select="TITLE">
									<span style="padding:0pt; text-align:left; ">
										<xsl:apply-templates/>
									</span>
								</xsl:for-each>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
				<xsl:choose>
					<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
						<div style="padding-top:0pt; " class="HTMLBorder">
							<xsl:for-each select="$XML">
								<xsl:for-each select="COURSE-LIST">
									<xsl:for-each select="COURSE[TITLE=$coTitle]">
										<xsl:sort select="TITLE" data-type="text" order="ascending"/>
										<xsl:sort select="SUBTITLE" data-type="text" order="ascending"/>
										<xsl:sort select="@id" data-type="number" order="ascending"/>
										<altova:level>
											<altova:marker altova:name="TOC" altova:id="coSubtitle">
												<xsl:attribute name="altova:entrytext">
													<xsl:value-of select="concat(sps:getSubtitleNumber( TITLE, SUBTITLE, @id ), '. ', SUBTITLE)"/>
												</xsl:attribute>
											</altova:marker>
											<table style="border:0pt; width:100%; " border="1" width="100%">
												<xsl:variable name="altova:CurrContextGrid_0" select="."/>
												<xsl:variable name="altova:ColumnData"/>
												<tbody style="border:0pt; ">
													<tr style="border:0pt; height:auto; ">
														<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; border-left:0pt; border-right:0pt; border-top:0pt; padding:0pt; vertical-align:bottom; width:6.54in; ">
															<h3 style="border-top-color:#7cb00d; border-top-width:1pt; margin-top:0pt; padding-top:0pt; ">
																<span>
																	<xsl:text>(</xsl:text>
																</span>
																<span>
																	<xsl:value-of select="sps:getSubtitleNumber( TITLE, SUBTITLE,@id)"/>
																</span>
																<span>
																	<xsl:text>) </xsl:text>
																</span>
																<xsl:for-each select="SUBTITLE">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</h3>
														</td>
														<td style="border:0pt; padding:0pt; text-align:right; vertical-align:top; width:0.70in; ">
															<img style="direction:rtl; display:inline; float:right; height:0.65in; margin-right:0pt; text-align:right; width:0.71in; ">
																<xsl:attribute name="src">
																	<xsl:if test="substring(string(&apos;..\Images\comelio_dozenten.png&apos;), 2, 1) = ':'">
																		<xsl:text>file:///</xsl:text>
																	</xsl:if>
																	<xsl:value-of select="translate(string(&apos;..\Images\comelio_dozenten.png&apos;), '&#x5c;', '/')"/>
																</xsl:attribute>
																<xsl:attribute name="alt"/>
															</img>
														</td>
													</tr>
												</tbody>
											</table>
											<table style="height:auto; min-width:0pt; width:auto; " border="0" cellpadding="2" cellspacing="2" width="100%">
												<xsl:variable name="altova:CurrContextGrid_1" select="."/>
												<xsl:variable name="altova:ColumnData"/>
												<tbody style="height:auto; width:auto; ">
													<tr style="height:auto; width:auto; " valign="top">
														<td style="border-right-color:gray; border-right-style:dotted; border-right-width:thin; width:auto; " valign="top">
															<table style="border:0px; width:100%; " border="1">
																<xsl:variable name="altova:CurrContextGrid_2" select="."/>
																<xsl:variable name="altova:ColumnData"/>
																<tbody>
																	<tr valign="top">
																		<td style="border:0px; line-height:111%; margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; " valign="top">
																			<h4 style="margin-top:0pt; padding-top:0pt; ">
																				<img>
																					<xsl:attribute name="src">
																						<xsl:if test="substring(string(&apos;..\Images\Focus.png&apos;), 2, 1) = ':'">
																							<xsl:text>file:///</xsl:text>
																						</xsl:if>
																						<xsl:value-of select="translate(string(&apos;..\Images\Focus.png&apos;), '&#x5c;', '/')"/>
																					</xsl:attribute>
																					<xsl:attribute name="alt"/>
																				</img>
																				<xsl:choose>
																					<xsl:when test="$language = &apos;en&apos;">
																						<span>
																							<xsl:text>Overview</xsl:text>
																						</span>
																					</xsl:when>
																					<xsl:when test="$language = &apos;de&apos;">
																						<span>
																							<xsl:text>Übersicht</xsl:text>
																						</span>
																					</xsl:when>
																				</xsl:choose>
																			</h4>
																			<table style="line-height:111%; margin:0pt; padding:0pt; width:auto; " border="0" width="100%">
																				<xsl:variable name="altova:CurrContextGrid_3" select="."/>
																				<xsl:variable name="altova:ColumnData"/>
																				<tbody>
																					<tr style="height:auto; ">
																						<td style="margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																							<p style="margin-top:0pt; padding-right:0pt; padding-top:0pt; " class="caption">
																								<span>
																									<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 2 and Language = $language]/Value"/>
																								</span>
																							</p>
																						</td>
																						<td style="width:auto; ">
																							<p style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																								<xsl:for-each select="@id">
																									<span>
																										<xsl:value-of select="string(.)"/>
																									</span>
																								</xsl:for-each>
																							</p>
																						</td>
																					</tr>
																					<tr style="height:auto; ">
																						<td style="margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																							<p style="margin-top:0pt; padding-top:0pt; " class="caption">
																								<span>
																									<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 13 and Language = $language]/Value"/>
																								</span>
																							</p>
																						</td>
																						<td style="width:auto; ">
																							<p style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																								<xsl:for-each select="@language">
																									<span>
																										<xsl:value-of select="string(.)"/>
																									</span>
																								</xsl:for-each>
																							</p>
																						</td>
																					</tr>
																					<tr style="height:auto; ">
																						<td style="margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																							<p style="margin-top:0pt; padding-top:0pt; ">
																								<span style="font-weight:bold; ">
																									<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 12 and Language = $language]/Value"/>
																								</span>
																							</p>
																						</td>
																						<td style="width:auto; ">
																							<p style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																								<xsl:for-each select="@duration">
																									<span>
																										<xsl:value-of select="string(.)"/>
																									</span>
																								</xsl:for-each>
																								<span>
																									<xsl:text>&#160;</xsl:text>
																								</span>
																								<xsl:choose>
																									<xsl:when test="number(@duration) != 1">
																										<xsl:choose>
																											<xsl:when test="$language = &apos;en&apos;">
																												<span>
																													<xsl:text>Days</xsl:text>
																												</span>
																											</xsl:when>
																											<xsl:when test="$language = &apos;de&apos;">
																												<span>
																													<xsl:text>Tage</xsl:text>
																												</span>
																											</xsl:when>
																										</xsl:choose>
																									</xsl:when>
																									<xsl:otherwise>
																										<xsl:choose>
																											<xsl:when test="$language = &apos;en&apos;">
																												<span>
																													<xsl:text>Day</xsl:text>
																												</span>
																											</xsl:when>
																											<xsl:when test="$language = &apos;de&apos;">
																												<span>
																													<xsl:text>Tag</xsl:text>
																												</span>
																											</xsl:when>
																										</xsl:choose>
																									</xsl:otherwise>
																								</xsl:choose>
																							</p>
																						</td>
																					</tr>
																					<tr style="height:auto; ">
																						<td style="margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																							<p style="margin-top:0pt; padding-top:0pt; " class="caption">
																								<span>
																									<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 8 and Language = $language]/Value"/>
																								</span>
																							</p>
																						</td>
																						<td style="width:auto; ">
																							<p style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																								<xsl:for-each select="@deliveryType">
																									<span>
																										<xsl:value-of select="string(.)"/>
																									</span>
																								</xsl:for-each>
																							</p>
																						</td>
																					</tr>
																					<tr>
																						<td style="margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																							<p style="margin-top:0pt; padding-top:0pt; " class="caption">
																								<span>
																									<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 3 and Language = $language]/Value"/>
																								</span>
																							</p>
																						</td>
																						<td style="width:auto; ">
																							<p style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																								<xsl:for-each select="TARGET_GROUP">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</p>
																						</td>
																					</tr>
																					<tr>
																						<td style="margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																							<p style="margin-top:0pt; padding-right:0pt; padding-top:0pt; " class="caption">
																								<span>
																									<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 9 and Language = $language]/Value"/>
																								</span>
																							</p>
																						</td>
																						<td style="height:auto; line-height:111%; width:auto; ">
																							<p style="margin-top:0pt; padding-left:0pt; padding-top:0pt; text-align:left; ">
																								<xsl:for-each select="PREREQUISITE">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</p>
																						</td>
																					</tr>
																					<tr>
																						<td style="height:auto; margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																							<p style="margin-top:0pt; padding-top:0pt; " class="caption">
																								<span>
																									<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 10 and Language = $language]/Value"/>
																								</span>
																							</p>
																						</td>
																						<td style="height:auto; line-height:111%; width:auto; ">
																							<p style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																								<xsl:for-each select="COURSE_METHOD">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</p>
																						</td>
																					</tr>
																					<tr>
																						<td style="height:auto; margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																							<p style="margin-top:0pt; padding-top:0pt; " class="caption">
																								<span>
																									<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 11 and Language = $language]/Value"/>
																								</span>
																							</p>
																						</td>
																						<td style="width:auto; ">
																							<p style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																								<xsl:for-each select="COURSE_LEVEL">
																									<xsl:apply-templates/>
																								</xsl:for-each>
																							</p>
																						</td>
																					</tr>
																				</tbody>
																			</table>
																		</td>
																	</tr>
																</tbody>
															</table>
														</td>
														<td style="display:block; empty-cells:hide; height:auto; min-width:0pt; text-align:left; width:auto; " valign="top">
															<xsl:if test="fn:count(fn:distinct-values(DATE-LIST/DATE[@id &gt; 0]/@id) )&gt; 0">
																<h4 style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																	<img>
																		<xsl:attribute name="src">
																			<xsl:if test="substring(string(&apos;..\Images\Dates.png&apos;), 2, 1) = ':'">
																				<xsl:text>file:///</xsl:text>
																			</xsl:if>
																			<xsl:value-of select="translate(string(&apos;..\Images\Dates.png&apos;), '&#x5c;', '/')"/>
																		</xsl:attribute>
																		<xsl:attribute name="alt"/>
																	</img>
																	<xsl:choose>
																		<xsl:when test="$language = &apos;en&apos;">
																			<span>
																				<xsl:text>Course Dates</xsl:text>
																			</span>
																		</xsl:when>
																		<xsl:when test="$language = &apos;de&apos;">
																			<span>
																				<xsl:text>Termine</xsl:text>
																			</span>
																		</xsl:when>
																	</xsl:choose>
																</h4>
																<xsl:call-template name="OutputCalendar">
																	<xsl:with-param name="pDateList" select="DATE-LIST"/>
																	<xsl:with-param name="language" select="$language"/>
																	<xsl:with-param name="outputType" select="$SV_OutputFormat "/>
																	<xsl:with-param name="validCities" select='string-join(fn:distinct-values($XML4/LOCATION-LIST/COUNTRY-LIST/COUNTRY/CITY-LIST/CITY[GROUP-LIST/GROUP_ID = fn:tokenize($locationGroups, ",")]/fn:string(NAME)), ",")'/>
																</xsl:call-template>
																<div style="display:block; margin-top:0pt; padding-top:0pt; text-align:right; width:100%; ">
																	<p style="display:table; line-height:normal; margin:0pt; margin-top:0pt; padding-top:0pt; text-align:right; width:100%; ">
																		<xsl:choose>
																			<xsl:when test="$language = &apos;en&apos;">
																				<span>
																					<xsl:text>Prices plus local taxes.</xsl:text>
																				</span>
																			</xsl:when>
																			<xsl:when test="$language = &apos;de&apos;">
																				<span>
																					<xsl:text>Preise zzgl. lokale Steuern.</xsl:text>
																				</span>
																			</xsl:when>
																		</xsl:choose>
																	</p>
																</div>
															</xsl:if>
														</td>
													</tr>
												</tbody>
											</table>
											<div style="keep-together:always; margin-right:5pt; margin-top:0pt; padding-top:0pt; ">
												<h4 style="keep-together:always; margin-top:0pt; padding-top:0pt; ">
													<img>
														<xsl:attribute name="src">
															<xsl:if test="substring(string(&apos;..\Images\Overview.png&apos;), 2, 1) = ':'">
																<xsl:text>file:///</xsl:text>
															</xsl:if>
															<xsl:value-of select="translate(string(&apos;..\Images\Overview.png&apos;), '&#x5c;', '/')"/>
														</xsl:attribute>
														<xsl:attribute name="alt"/>
													</img>
													<xsl:choose>
														<xsl:when test="$language = &apos;en&apos;">
															<span>
																<xsl:text>Course Description</xsl:text>
															</span>
														</xsl:when>
														<xsl:when test="$language = &apos;de&apos;">
															<span>
																<xsl:text>Kursbeschreibung</xsl:text>
															</span>
														</xsl:when>
													</xsl:choose>
												</h4>
												<p style="keep-together:always; margin-top:0pt; padding-top:0pt; ">
													<xsl:for-each select="OBJECTIVES">
														<xsl:apply-templates/>
													</xsl:for-each>
												</p>
											</div>
											<xsl:apply-templates select="Module-List"/>
										</altova:level>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</div>
					</xsl:when>
					<xsl:otherwise>
						<xsl:for-each select="$XML">
							<xsl:for-each select="COURSE-LIST">
								<xsl:for-each select="COURSE[TITLE=$coTitle]">
									<xsl:sort select="TITLE" data-type="text" order="ascending"/>
									<xsl:sort select="SUBTITLE" data-type="text" order="ascending"/>
									<xsl:sort select="@id" data-type="number" order="ascending"/>
									<altova:level>
										<altova:marker altova:name="TOC" altova:id="coSubtitle">
											<xsl:attribute name="altova:entrytext">
												<xsl:value-of select="concat(sps:getSubtitleNumber( TITLE, SUBTITLE, @id ), '. ', SUBTITLE)"/>
											</xsl:attribute>
										</altova:marker>
										<table style="border:0pt; width:100%; " border="1" width="100%">
											<xsl:variable name="altova:CurrContextGrid_0" select="."/>
											<xsl:variable name="altova:ColumnData"/>
											<tbody style="border:0pt; ">
												<tr style="border:0pt; height:auto; ">
													<td style="border-bottom-color:black; border-bottom-style:dotted; border-bottom-width:thin; border-left:0pt; border-right:0pt; border-top:0pt; padding:0pt; vertical-align:bottom; width:6.54in; ">
														<h3 style="border-top-color:#7cb00d; border-top-width:1pt; margin-top:0pt; padding-top:0pt; ">
															<span>
																<xsl:text>(</xsl:text>
															</span>
															<span>
																<xsl:value-of select="sps:getSubtitleNumber( TITLE, SUBTITLE,@id)"/>
															</span>
															<span>
																<xsl:text>) </xsl:text>
															</span>
															<xsl:for-each select="SUBTITLE">
																<xsl:apply-templates/>
															</xsl:for-each>
														</h3>
													</td>
													<td style="border:0pt; padding:0pt; text-align:right; vertical-align:top; width:0.70in; ">
														<img style="direction:rtl; display:inline; float:right; height:0.65in; margin-right:0pt; text-align:right; width:0.71in; ">
															<xsl:attribute name="src">
																<xsl:if test="substring(string(&apos;..\Images\comelio_dozenten.png&apos;), 2, 1) = ':'">
																	<xsl:text>file:///</xsl:text>
																</xsl:if>
																<xsl:value-of select="translate(string(&apos;..\Images\comelio_dozenten.png&apos;), '&#x5c;', '/')"/>
															</xsl:attribute>
															<xsl:attribute name="alt"/>
														</img>
													</td>
												</tr>
											</tbody>
										</table>
										<table style="height:auto; min-width:0pt; width:auto; " border="0" cellpadding="2" cellspacing="2" width="100%">
											<xsl:variable name="altova:CurrContextGrid_1" select="."/>
											<xsl:variable name="altova:ColumnData"/>
											<tbody style="height:auto; width:auto; ">
												<tr style="height:auto; width:auto; " valign="top">
													<td style="border-right-color:gray; border-right-style:dotted; border-right-width:thin; width:auto; " valign="top">
														<table style="border:0px; width:100%; " border="1">
															<xsl:variable name="altova:CurrContextGrid_2" select="."/>
															<xsl:variable name="altova:ColumnData"/>
															<tbody>
																<tr valign="top">
																	<td style="border:0px; line-height:111%; margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; " valign="top">
																		<h4 style="margin-top:0pt; padding-top:0pt; ">
																			<img>
																				<xsl:attribute name="src">
																					<xsl:if test="substring(string(&apos;..\Images\Focus.png&apos;), 2, 1) = ':'">
																						<xsl:text>file:///</xsl:text>
																					</xsl:if>
																					<xsl:value-of select="translate(string(&apos;..\Images\Focus.png&apos;), '&#x5c;', '/')"/>
																				</xsl:attribute>
																				<xsl:attribute name="alt"/>
																			</img>
																			<xsl:choose>
																				<xsl:when test="$language = &apos;en&apos;">
																					<span>
																						<xsl:text>Overview</xsl:text>
																					</span>
																				</xsl:when>
																				<xsl:when test="$language = &apos;de&apos;">
																					<span>
																						<xsl:text>Übersicht</xsl:text>
																					</span>
																				</xsl:when>
																			</xsl:choose>
																		</h4>
																		<table style="line-height:111%; margin:0pt; padding:0pt; width:auto; " border="0" width="100%">
																			<xsl:variable name="altova:CurrContextGrid_3" select="."/>
																			<xsl:variable name="altova:ColumnData"/>
																			<tbody>
																				<tr style="height:auto; ">
																					<td style="margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																						<p style="margin-top:0pt; padding-right:0pt; padding-top:0pt; " class="caption">
																							<span>
																								<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 2 and Language = $language]/Value"/>
																							</span>
																						</p>
																					</td>
																					<td style="width:auto; ">
																						<p style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																							<xsl:for-each select="@id">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</p>
																					</td>
																				</tr>
																				<tr style="height:auto; ">
																					<td style="margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																						<p style="margin-top:0pt; padding-top:0pt; " class="caption">
																							<span>
																								<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 13 and Language = $language]/Value"/>
																							</span>
																						</p>
																					</td>
																					<td style="width:auto; ">
																						<p style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																							<xsl:for-each select="@language">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</p>
																					</td>
																				</tr>
																				<tr style="height:auto; ">
																					<td style="margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																						<p style="margin-top:0pt; padding-top:0pt; ">
																							<span style="font-weight:bold; ">
																								<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 12 and Language = $language]/Value"/>
																							</span>
																						</p>
																					</td>
																					<td style="width:auto; ">
																						<p style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																							<xsl:for-each select="@duration">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																							<span>
																								<xsl:text>&#160;</xsl:text>
																							</span>
																							<xsl:choose>
																								<xsl:when test="number(@duration) != 1">
																									<xsl:choose>
																										<xsl:when test="$language = &apos;en&apos;">
																											<span>
																												<xsl:text>Days</xsl:text>
																											</span>
																										</xsl:when>
																										<xsl:when test="$language = &apos;de&apos;">
																											<span>
																												<xsl:text>Tage</xsl:text>
																											</span>
																										</xsl:when>
																									</xsl:choose>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:choose>
																										<xsl:when test="$language = &apos;en&apos;">
																											<span>
																												<xsl:text>Day</xsl:text>
																											</span>
																										</xsl:when>
																										<xsl:when test="$language = &apos;de&apos;">
																											<span>
																												<xsl:text>Tag</xsl:text>
																											</span>
																										</xsl:when>
																									</xsl:choose>
																								</xsl:otherwise>
																							</xsl:choose>
																						</p>
																					</td>
																				</tr>
																				<tr style="height:auto; ">
																					<td style="margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																						<p style="margin-top:0pt; padding-top:0pt; " class="caption">
																							<span>
																								<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 8 and Language = $language]/Value"/>
																							</span>
																						</p>
																					</td>
																					<td style="width:auto; ">
																						<p style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																							<xsl:for-each select="@deliveryType">
																								<span>
																									<xsl:value-of select="string(.)"/>
																								</span>
																							</xsl:for-each>
																						</p>
																					</td>
																				</tr>
																				<tr>
																					<td style="margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																						<p style="margin-top:0pt; padding-top:0pt; " class="caption">
																							<span>
																								<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 3 and Language = $language]/Value"/>
																							</span>
																						</p>
																					</td>
																					<td style="width:auto; ">
																						<p style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																							<xsl:for-each select="TARGET_GROUP">
																								<xsl:apply-templates/>
																							</xsl:for-each>
																						</p>
																					</td>
																				</tr>
																				<tr>
																					<td style="margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																						<p style="margin-top:0pt; padding-right:0pt; padding-top:0pt; " class="caption">
																							<span>
																								<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 9 and Language = $language]/Value"/>
																							</span>
																						</p>
																					</td>
																					<td style="height:auto; line-height:111%; width:auto; ">
																						<p style="margin-top:0pt; padding-left:0pt; padding-top:0pt; text-align:left; ">
																							<xsl:for-each select="PREREQUISITE">
																								<xsl:apply-templates/>
																							</xsl:for-each>
																						</p>
																					</td>
																				</tr>
																				<tr>
																					<td style="height:auto; margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																						<p style="margin-top:0pt; padding-top:0pt; " class="caption">
																							<span>
																								<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 10 and Language = $language]/Value"/>
																							</span>
																						</p>
																					</td>
																					<td style="height:auto; line-height:111%; width:auto; ">
																						<p style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																							<xsl:for-each select="COURSE_METHOD">
																								<xsl:apply-templates/>
																							</xsl:for-each>
																						</p>
																					</td>
																				</tr>
																				<tr>
																					<td style="height:auto; margin-bottom:2pt; margin-left:0pt; margin-right:2pt; margin-top:2pt; padding:3pt; width:auto; ">
																						<p style="margin-top:0pt; padding-top:0pt; " class="caption">
																							<span>
																								<xsl:value-of select="$XML2/Translation-List/Translation[number(ID) = 11 and Language = $language]/Value"/>
																							</span>
																						</p>
																					</td>
																					<td style="width:auto; ">
																						<p style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																							<xsl:for-each select="COURSE_LEVEL">
																								<xsl:apply-templates/>
																							</xsl:for-each>
																						</p>
																					</td>
																				</tr>
																			</tbody>
																		</table>
																	</td>
																</tr>
															</tbody>
														</table>
													</td>
													<td style="display:block; empty-cells:hide; height:auto; min-width:0pt; text-align:left; width:auto; " valign="top">
														<xsl:if test="fn:count(fn:distinct-values(DATE-LIST/DATE[@id &gt; 0]/@id) )&gt; 0">
															<h4 style="margin-top:0pt; padding-top:0pt; text-align:left; ">
																<img>
																	<xsl:attribute name="src">
																		<xsl:if test="substring(string(&apos;..\Images\Dates.png&apos;), 2, 1) = ':'">
																			<xsl:text>file:///</xsl:text>
																		</xsl:if>
																		<xsl:value-of select="translate(string(&apos;..\Images\Dates.png&apos;), '&#x5c;', '/')"/>
																	</xsl:attribute>
																	<xsl:attribute name="alt"/>
																</img>
																<xsl:choose>
																	<xsl:when test="$language = &apos;en&apos;">
																		<span>
																			<xsl:text>Course Dates</xsl:text>
																		</span>
																	</xsl:when>
																	<xsl:when test="$language = &apos;de&apos;">
																		<span>
																			<xsl:text>Termine</xsl:text>
																		</span>
																	</xsl:when>
																</xsl:choose>
															</h4>
															<xsl:call-template name="OutputCalendar">
																<xsl:with-param name="pDateList" select="DATE-LIST"/>
																<xsl:with-param name="language" select="$language"/>
																<xsl:with-param name="outputType" select="$SV_OutputFormat "/>
																<xsl:with-param name="validCities" select='string-join(fn:distinct-values($XML4/LOCATION-LIST/COUNTRY-LIST/COUNTRY/CITY-LIST/CITY[GROUP-LIST/GROUP_ID = fn:tokenize($locationGroups, ",")]/fn:string(NAME)), ",")'/>
															</xsl:call-template>
															<div style="display:block; margin-top:0pt; padding-top:0pt; text-align:right; width:100%; ">
																<p style="display:table; line-height:normal; margin:0pt; margin-top:0pt; padding-top:0pt; text-align:right; width:100%; ">
																	<xsl:choose>
																		<xsl:when test="$language = &apos;en&apos;">
																			<span>
																				<xsl:text>Prices plus local taxes.</xsl:text>
																			</span>
																		</xsl:when>
																		<xsl:when test="$language = &apos;de&apos;">
																			<span>
																				<xsl:text>Preise zzgl. lokale Steuern.</xsl:text>
																			</span>
																		</xsl:when>
																	</xsl:choose>
																</p>
															</div>
														</xsl:if>
													</td>
												</tr>
											</tbody>
										</table>
										<div style="keep-together:always; margin-right:5pt; margin-top:0pt; padding-top:0pt; ">
											<h4 style="keep-together:always; margin-top:0pt; padding-top:0pt; ">
												<img>
													<xsl:attribute name="src">
														<xsl:if test="substring(string(&apos;..\Images\Overview.png&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;..\Images\Overview.png&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
													<xsl:attribute name="alt"/>
												</img>
												<xsl:choose>
													<xsl:when test="$language = &apos;en&apos;">
														<span>
															<xsl:text>Course Description</xsl:text>
														</span>
													</xsl:when>
													<xsl:when test="$language = &apos;de&apos;">
														<span>
															<xsl:text>Kursbeschreibung</xsl:text>
														</span>
													</xsl:when>
												</xsl:choose>
											</h4>
											<p style="keep-together:always; margin-top:0pt; padding-top:0pt; ">
												<xsl:for-each select="OBJECTIVES">
													<xsl:apply-templates/>
												</xsl:for-each>
											</p>
										</div>
										<xsl:apply-templates select="Module-List"/>
									</altova:level>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:otherwise>
				</xsl:choose>
			</altova:level>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="DATE-LIST">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<br/>
		<h4>
			<xsl:choose>
				<xsl:when test="$language = &apos;en&apos;">
					<span>
						<xsl:text>Calendar</xsl:text>
					</span>
				</xsl:when>
				<xsl:when test="$language = &apos;de&apos;">
					<span>
						<xsl:text>Kalender</xsl:text>
					</span>
				</xsl:when>
			</xsl:choose>
		</h4>
		<table border="1">
			<xsl:variable name="altova:CurrContextGrid_4" select="."/>
			<xsl:variable name="altova:ColumnData"/>
			<thead>
				<tr>
					<th>
						<span>
							<xsl:text>CITY</xsl:text>
						</span>
					</th>
					<th>
						<span>
							<xsl:text>START_DATE</xsl:text>
						</span>
					</th>
					<th>
						<span>
							<xsl:text>END_DATE</xsl:text>
						</span>
					</th>
					<th>
						<span>
							<xsl:text>PRICE</xsl:text>
						</span>
					</th>
				</tr>
			</thead>
			<tbody>
				<xsl:for-each select="DATE">
					<tr>
						<td>
							<xsl:for-each select="CITY">
								<xsl:apply-templates/>
							</xsl:for-each>
						</td>
						<td>
							<xsl:for-each select="START_DATE">
								<xsl:apply-templates/>
							</xsl:for-each>
						</td>
						<td>
							<xsl:for-each select="END_DATE">
								<xsl:apply-templates/>
							</xsl:for-each>
						</td>
						<td>
							<xsl:for-each select="PRICE">
								<xsl:apply-templates/>
							</xsl:for-each>
						</td>
					</tr>
				</xsl:for-each>
			</tbody>
		</table>
	</xsl:template>
	<xsl:template match="Module-List">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:if test="not(preceding-sibling::Module-List)">
			<xsl:for-each select="..">
				<div style="keep-together:auto; margin-right:5pt; page-break-after:always; ">
					<xsl:for-each select="Module-List">
						<p style="keep-together:always; " class="keepTogether">
							<h4 class="keepTogether">
								<img>
									<xsl:attribute name="src">
										<xsl:if test="substring(string(&apos;..\Images\Details2.png&apos;), 2, 1) = ':'">
											<xsl:text>file:///</xsl:text>
										</xsl:if>
										<xsl:value-of select="translate(string(&apos;..\Images\Details2.png&apos;), '&#x5c;', '/')"/>
									</xsl:attribute>
									<xsl:attribute name="alt"/>
								</img>
								<xsl:choose>
									<xsl:when test="$language = &apos;en&apos;">
										<span>
											<xsl:text>Course Outline</xsl:text>
										</span>
									</xsl:when>
									<xsl:when test="$language = &apos;de&apos;">
										<span>
											<xsl:text>Kursinhalte</xsl:text>
										</span>
									</xsl:when>
								</xsl:choose>
							</h4>
							<xsl:for-each select="Module">
								<xsl:if test="fn:position() = 1">
									<h5 style="keep-together:always; " class="keepTogether">
										<xsl:for-each select="Order">
											<span class="keepTogether">
												<xsl:apply-templates/>
											</span>
										</xsl:for-each>
										<span>
											<xsl:text>. </xsl:text>
										</span>
										<xsl:for-each select="Title">
											<span class="keepTogether">
												<xsl:apply-templates/>
											</span>
										</xsl:for-each>
									</h5>
									<p style="keep-together:always; " class="keepTogether">
										<xsl:if test="count(Length) != 0">
											<span>
												<xsl:text>(</xsl:text>
											</span>
											<xsl:for-each select="Length">
												<span class="keepTogether">
													<xsl:apply-templates/>
												</span>
											</xsl:for-each>
											<span>
												<xsl:text>&#160;</xsl:text>
											</span>
											<xsl:choose>
												<xsl:when test="number(Length) != 1">
													<xsl:choose>
														<xsl:when test="$language = &apos;en&apos;">
															<span>
																<xsl:text>Days</xsl:text>
															</span>
														</xsl:when>
														<xsl:when test="$language = &apos;de&apos;">
															<span>
																<xsl:text>Tage</xsl:text>
															</span>
														</xsl:when>
													</xsl:choose>
												</xsl:when>
												<xsl:otherwise>
													<xsl:choose>
														<xsl:when test="$language = &apos;en&apos;">
															<span>
																<xsl:text>Day</xsl:text>
															</span>
														</xsl:when>
														<xsl:when test="$language = &apos;de&apos;">
															<span>
																<xsl:text>Tag</xsl:text>
															</span>
														</xsl:when>
													</xsl:choose>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>) </xsl:text>
											</span>
										</xsl:if>
										<xsl:for-each select="Synopsis">
											<span class="keepTogether">
												<xsl:apply-templates/>
											</span>
										</xsl:for-each>
									</p>
								</xsl:if>
							</xsl:for-each>
						</p>
						<xsl:for-each select="Module">
							<xsl:if test="fn:position() &gt; 1">
								<p style="keep-together:always; " class="keepTogether">
									<h5 style="keep-together:always; ">
										<xsl:for-each select="Order">
											<span class="keepTogether">
												<xsl:apply-templates/>
											</span>
										</xsl:for-each>
										<span>
											<xsl:text>. </xsl:text>
										</span>
										<xsl:for-each select="Title">
											<span class="keepTogether">
												<xsl:apply-templates/>
											</span>
										</xsl:for-each>
									</h5>
									<p style="keep-together:always; ">
										<xsl:if test="count(Length) != 0">
											<span>
												<xsl:text>(</xsl:text>
											</span>
											<xsl:for-each select="Length">
												<span class="keepTogether">
													<xsl:apply-templates/>
												</span>
											</xsl:for-each>
											<span>
												<xsl:text>&#160;</xsl:text>
											</span>
											<xsl:choose>
												<xsl:when test="number(Length) != 1">
													<xsl:choose>
														<xsl:when test="$language = &apos;en&apos;">
															<span>
																<xsl:text>Days</xsl:text>
															</span>
														</xsl:when>
														<xsl:when test="$language = &apos;de&apos;">
															<span>
																<xsl:text>Tage</xsl:text>
															</span>
														</xsl:when>
													</xsl:choose>
												</xsl:when>
												<xsl:otherwise>
													<xsl:choose>
														<xsl:when test="$language = &apos;en&apos;">
															<span>
																<xsl:text>Day</xsl:text>
															</span>
														</xsl:when>
														<xsl:when test="$language = &apos;de&apos;">
															<span>
																<xsl:text>Tag</xsl:text>
															</span>
														</xsl:when>
													</xsl:choose>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>) </xsl:text>
											</span>
										</xsl:if>
										<xsl:for-each select="Synopsis">
											<span class="keepTogether">
												<xsl:apply-templates/>
											</span>
										</xsl:for-each>
									</p>
								</p>
							</xsl:if>
						</xsl:for-each>
					</xsl:for-each>
				</div>
				<br/>
			</xsl:for-each>
		</xsl:if>
	</xsl:template>
	<xsl:template name="AddressBerlin">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<p>
			<span>
				<xsl:text>Comelio GmbH - Goethestr. 34 -13086 Berlin</xsl:text>
			</span>
		</p>
	</xsl:template>
	<xsl:template name="Label">
		<xsl:param name="Value" as="xs:string*" select="&apos;&apos;"/>
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
	</xsl:template>
	<xsl:template name="Introduction">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:choose>
			<xsl:when test="$language = &apos;en&apos;">
				<span>
					<xsl:text>Course Catalog</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="$language = &apos;de&apos;">
				<span>
					<xsl:text>Kurskatalog</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="Locations">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<altova:level>
			<altova:marker altova:name="TOC" altova:id="coTitle">
				<xsl:attribute name="altova:entrytext">
					<xsl:value-of select="if($language = 'en') 
then 'a. Locations'
else 'a. Standorte'"/>
				</xsl:attribute>
			</altova:marker>
			<xsl:choose>
				<xsl:when test="$language = &apos;en&apos;">
					<h3>
						<span>
							<xsl:text>a. Locations</xsl:text>
						</span>
					</h3>
					<table border="0" width="100%">
						<xsl:variable name="altova:CurrContextGrid_5" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr>
								<td style="width:2.42in; ">
									<img>
										<xsl:attribute name="src">
											<xsl:if test="substring(string(&apos;..\Images\Locations_Map_GER-AT-CH.png&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;..\Images\Locations_Map_GER-AT-CH.png&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
										<xsl:attribute name="alt"/>
									</img>
								</td>
								<td>
									<p>
										<span>
											<xsl:text>Our trainings take place at various locations in the German-speaking countries.</xsl:text>
										</span>
									</p>
									<p>
										<span class="emphasis">
											<xsl:text>Public trainings:</xsl:text>
										</span>
									</p>
									<p>
										<span>
											<xsl:text>You can enroll for public trainings at our training centers across Germany like in Berlin, Dresden, Hamburg, München / Munich, Düsseldorf, Frankfurt, and Stuttgart. Not all public trainings will be organized in all cities but you can still book a particular training for your team in one of our training and conference centers.</xsl:text>
										</span>
									</p>
									<p>
										<span>
											<xsl:text>In Austria you can attend seminars and trainings in Wien / Vienna while we offer training dates in Switzerland in Zürich / Zurich.</xsl:text>
										</span>
									</p>
									<p class="emphasis">
										<span>
											<xsl:text>On-site trainings:</xsl:text>
										</span>
									</p>
									<p>
										<span>
											<xsl:text>We have mobile and flexible trainers / lecturers who like to visit you and your team for an on-site training or a training in a conference center or hotel near you.</xsl:text>
										</span>
									</p>
								</td>
							</tr>
						</tbody>
					</table>
				</xsl:when>
				<xsl:when test="$language = &apos;de&apos;">
					<h3>
						<span>
							<xsl:text>a. Standorte</xsl:text>
						</span>
					</h3>
					<table border="0" width="100%">
						<xsl:variable name="altova:CurrContextGrid_6" select="."/>
						<xsl:variable name="altova:ColumnData"/>
						<tbody>
							<tr>
								<td style="width:2.42in; ">
									<img>
										<xsl:attribute name="src">
											<xsl:if test="substring(string(&apos;..\Images\Locations_Map_GER-AT-CH.png&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;..\Images\Locations_Map_GER-AT-CH.png&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
										<xsl:attribute name="alt"/>
									</img>
								</td>
								<td>
									<p>
										<span>
											<xsl:text>Unsere Seminare finden an verschiedenen Standorten in der DACH-Region statt.</xsl:text>
										</span>
									</p>
									<p>
										<span class="emphasis">
											<xsl:text>Öffentliche Seminare:</xsl:text>
										</span>
									</p>
									<p>
										<span>
											<xsl:text>Unsere Seminare können Sie an unseren Standorten in Deutschland in Berlin, Dresden, Hamburg, München, Düsseldorf, Frankfurt und Stuttgart buchen. Nicht alle öffentlichen Seminare finden an allen Standorten statt. Doch gibt es die Möglichkeit, für Ihre Gruppe unsere Seminarzentren für en individuelles Training zu verwenden.</xsl:text>
										</span>
									</p>
									<p>
										<span>
											<xsl:text>In Österreich bieten wir Seminare in Wien und in der Schweiz in Zürich an.</xsl:text>
										</span>
									</p>
									<p class="emphasis">
										<span>
											<xsl:text>Inhouse Seminare:</xsl:text>
										</span>
									</p>
									<p>
										<span>
											<xsl:text>Wir sind regional flexibel und kommen auch gerne direkt zu Ihnen oder organisieren ein für Sie angepasstes Seminar in einem Tagungszentrum in Ihrer Stadt.</xsl:text>
										</span>
									</p>
								</td>
							</tr>
						</tbody>
					</table>
				</xsl:when>
			</xsl:choose>
		</altova:level>
		<br/>
		<xsl:call-template name="Country"/>
	</xsl:template>
	<xsl:template name="Disclaimer">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<altova:level>
			<altova:marker altova:name="TOC" altova:id="coTitle">
				<xsl:attribute name="altova:entrytext">
					<xsl:value-of select="if($language = 'en')
then 'b. Disclaimer'
else 'b. Impressum'"/>
				</xsl:attribute>
			</altova:marker>
			<xsl:choose>
				<xsl:when test="$language = &apos;en&apos;">
					<h3>
						<span>
							<xsl:text>b. Disclaimer</xsl:text>
						</span>
					</h3>
				</xsl:when>
				<xsl:when test="$language = &apos;de&apos;">
					<h3>
						<span>
							<xsl:text>b. Impressum</xsl:text>
						</span>
					</h3>
				</xsl:when>
			</xsl:choose>
		</altova:level>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<img>
			<xsl:attribute name="src">
				<xsl:if test="substring(string(&apos;..\Images\Frankfurt Interior-s.jpg&apos;), 2, 1) = ':'">
					<xsl:text>file:///</xsl:text>
				</xsl:if>
				<xsl:value-of select="translate(string(&apos;..\Images\Frankfurt Interior-s.jpg&apos;), '&#x5c;', '/')"/>
			</xsl:attribute>
			<xsl:attribute name="alt"/>
		</img>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<table border="0" width="100%">
			<xsl:variable name="altova:CurrContextGrid_7" select="."/>
			<xsl:variable name="altova:ColumnData"/>
			<tbody valign="top">
				<tr valign="top">
					<td valign="top" width="20%">
						<p>
							<span>
								<xsl:text>Comelio GmbH</xsl:text>
							</span>
							<br/>
							<span>
								<xsl:text>Goethestr. 34</xsl:text>
							</span>
							<br/>
							<span>
								<xsl:text>13086 Berlin</xsl:text>
							</span>
							<br/>
							<span>
								<xsl:text>Germany</xsl:text>
							</span>
						</p>
					</td>
					<td valign="top" width="30%">
						<ul>
							<li>
								<span>
									<xsl:text>Tel: +49.30.8145622.00</xsl:text>
								</span>
							</li>
							<li>
								<span>
									<xsl:text>Fax: +49.30.8145622.10</xsl:text>
								</span>
							</li>
						</ul>
					</td>
					<td valign="top">
						<ul>
							<li>
								<altova:hyperlink>
									<xsl:choose>
										<xsl:when test="not(string(&apos;http://www.comelio.com&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;http://www.comelio.com&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;http://www.comelio.com&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;http://www.comelio.com&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;http://www.comelio.com&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<span>
										<xsl:text>www.comelio.com</xsl:text>
									</span>
								</altova:hyperlink>
								<span>
									<xsl:text> | </xsl:text>
								</span>
								<altova:hyperlink>
									<xsl:choose>
										<xsl:when test="not(string(&apos;http://www.comelio.de&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;http://www.comelio.de&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;http://www.comelio.de&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;http://www.comelio.de&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;http://www.comelio.de&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<span>
										<xsl:text>.de</xsl:text>
									</span>
								</altova:hyperlink>
								<span>
									<xsl:text> | </xsl:text>
								</span>
								<altova:hyperlink>
									<xsl:choose>
										<xsl:when test="not(string(&apos;http://www.comelio.at&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;http://www.comelio.at&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;http://www.comelio.at&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;http://www.comelio.at&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;http://www.comelio.at&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<span>
										<xsl:text>.at</xsl:text>
									</span>
								</altova:hyperlink>
								<span>
									<xsl:text> | </xsl:text>
								</span>
								<altova:hyperlink>
									<xsl:choose>
										<xsl:when test="not(string(&apos;http://www.comelio.ch&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;http://www.comelio.ch&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;http://www.comelio.ch&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;http://www.comelio.ch&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;http://www.comelio.ch&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<span>
										<xsl:text>.ch</xsl:text>
									</span>
								</altova:hyperlink>
							</li>
							<li>
								<altova:hyperlink>
									<xsl:choose>
										<xsl:when test="not(string(&apos;http://www.comelio-seminare.com&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;http://www.comelio-seminare.com&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;http://www.comelio-seminare.com&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;http://www.comelio-seminare.com&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;http://www.comelio-seminare.com&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<span>
										<xsl:text>www.comelio-seminare.com</xsl:text>
									</span>
								</altova:hyperlink>
							</li>
							<li>
								<altova:hyperlink>
									<xsl:choose>
										<xsl:when test="not(string(&apos;mailto:info@comelio.com&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;mailto:info@comelio.com&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;mailto:info@comelio.com&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;mailto:info@comelio.com&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;mailto:info@comelio.com&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<span>
										<xsl:text>info@comelio.com</xsl:text>
									</span>
								</altova:hyperlink>
							</li>
							<li>
								<altova:hyperlink>
									<xsl:choose>
										<xsl:when test="not(string(&apos;https://www.facebook.com/comeliogroup&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;https://www.facebook.com/comeliogroup&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;https://www.facebook.com/comeliogroup&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;https://www.facebook.com/comeliogroup&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;https://www.facebook.com/comeliogroup&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<span>
										<xsl:text>https://www.facebook.com/comeliogroup</xsl:text>
									</span>
								</altova:hyperlink>
							</li>
							<li>
								<altova:hyperlink>
									<xsl:choose>
										<xsl:when test="not(string(&apos;https://twitter.com/Comelio&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;https://twitter.com/Comelio&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;https://twitter.com/Comelio&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;https://twitter.com/Comelio&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;https://twitter.com/Comelio&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<span>
										<xsl:text>https://twitter.com/Comelio</xsl:text>
									</span>
								</altova:hyperlink>
							</li>
						</ul>
					</td>
				</tr>
			</tbody>
		</table>
		<br/>
	</xsl:template>
	<xsl:template name="Country">
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:for-each select="$XML4">
			<xsl:for-each select="LOCATION-LIST">
				<xsl:for-each select="COUNTRY-LIST">
					<xsl:for-each select="COUNTRY[if(count(fn:tokenize($locationGroups, &quot;,&quot;)) &lt; 1)
then count(CITY-LIST/CITY/NAME) &gt; 0
else
count(CITY-LIST/CITY/GROUP-LIST[GROUP_ID = fn:tokenize($locationGroups, &quot;,&quot;) ]/GROUP_ID) &gt; 0]">
						<xsl:sort select="count(CITY-LIST/CITY)" data-type="text" order="descending"/>
						<h4>
							<xsl:for-each select="sps:getCountryName( @name ,  $language)">
								<xsl:choose>
									<xsl:when test=". instance of element() or . instance of document-node()">
										<xsl:apply-templates/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="."/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
						</h4>
						<xsl:for-each select="CITY-LIST">
							<xsl:for-each select="CITY[if(count(fn:tokenize($locationGroups, &quot;,&quot;))&lt; 1)
then count(NAME) &gt; 0
else
count(GROUP-LIST[GROUP_ID = fn:tokenize($locationGroups, &quot;,&quot;)]/GROUP_ID) &gt; 0]">
								<xsl:sort select="NAME" data-type="text" order="ascending"/>
								<table style="border:0px; padding:.1em; " border="1" width="100%">
									<xsl:variable name="altova:CurrContextGrid_8" select="."/>
									<xsl:variable name="altova:ColumnData"/>
									<tbody>
										<tr>
											<td style="border:0px; vertical-align:middle; width:25%; ">
												<xsl:call-template name="cityThumbnail">
													<xsl:with-param name="city" select="NAME"/>
													<xsl:with-param name="outputType" select="$SV_OutputFormat "/>
												</xsl:call-template>
											</td>
											<td style="border:0px; width:auto; ">
												<table style="border:0px; vertical-align:top; width:auto; " border="1">
													<xsl:variable name="altova:CurrContextGrid_9" select="."/>
													<xsl:variable name="altova:ColumnData">
														<xsl:for-each select="ROOM-LIST">
															<altova:Element altova:sDesignElemId="10" altova:sNodeId="{generate-id(.)}" altova:sDocumentUri="{document-uri(root(.))}">
																<xsl:for-each select="ROOM">
																	<altova:Element altova:sDesignElemId="11" altova:sNodeId="{generate-id(.)}" altova:sDocumentUri="{document-uri(root(.))}"/>
																</xsl:for-each>
															</altova:Element>
														</xsl:for-each>
													</xsl:variable>
													<tbody>
														<tr style="border:0px; ">
															<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = 10 ]"/>
															<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
																<xsl:variable name="altova:posCurrPseudo" select="position()"/>
																<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
																<xsl:variable name="altova:nodesNextPseudo" select="$altova:nodeCurrPseudo/altova:Element[ @altova:sDesignElemId = 11 ]"/>
																<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
																	<xsl:variable name="altova:posCurrPseudo" select="position()"/>
																	<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
																	<td style="border:0px; padding:.05em; width:auto; ">
																		<xsl:for-each select="NAME">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																		<br/>
																		<xsl:for-each select="DEPARTMENT">
																			<span style="display:inline-block; ">
																				<xsl:apply-templates/>
																			</span>
																		</xsl:for-each>
																		<xsl:for-each select="STREET">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																		<br/>
																		<xsl:for-each select="ZIP">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																		<span>
																			<xsl:text>&#160;</xsl:text>
																		</span>
																		<span>
																			<xsl:value-of select="../../NAME"/>
																		</span>
																	</td>
																</xsl:for-each>
															</xsl:for-each>
														</tr>
													</tbody>
												</table>
												<br/>
												<span>
													<xsl:text>Tel:</xsl:text>
												</span>
												<xsl:for-each select="PHONE">
													<xsl:apply-templates/>
												</xsl:for-each>
												<br/>
												<span>
													<xsl:text>Fax:</xsl:text>
												</span>
												<xsl:for-each select="FAX">
													<xsl:apply-templates/>
												</xsl:for-each>
											</td>
										</tr>
									</tbody>
								</table>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="/">
		<xsl:for-each select="$altova:DesignAfterStep1">
			<xsl:apply-templates mode="altova:step2"/>
		</xsl:for-each>
		<xsl:if test="$altova:bGeneratingFromPxf">
			<xsl:for-each select="distinct-values(for $i in $altova:DesignAfterStep1//img[not(@altova:ImageDataBase64)]/@src return lower-case($i))">
				<xsl:if test="not(starts-with(., 'http://') or starts-with(., 'ftp://'))">
					<xsl:if test="unparsed-text-available(., 'x-binarytobase64')">
						<xsl:result-document href="{.}" method="text" encoding="x-base64tobinary">
							<xsl:value-of select="unparsed-text(., 'x-binarytobase64')"/>
						</xsl:result-document>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<xsl:for-each select="distinct-values(for $i in $altova:toc-xslt-tree//img[not(@altova:ImageDataBase64)]/@src return lower-case($i))">
				<xsl:if test="not(starts-with(., 'http://') or starts-with(., 'ftp://'))">
					<xsl:if test="unparsed-text-available(., 'x-binarytobase64')">
						<xsl:result-document href="{.}" method="text" encoding="x-base64tobinary">
							<xsl:value-of select="unparsed-text(., 'x-binarytobase64')"/>
						</xsl:result-document>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<xsl:for-each select="distinct-values(for $i in $altova:CssImages/altova:CssImage/@altova:sUrl return lower-case($i))">
				<xsl:if test="not(starts-with(., 'http://') or starts-with(., 'ftp://'))">
					<xsl:if test="unparsed-text-available(., 'x-binarytobase64')">
						<xsl:result-document href="{.}" method="text" encoding="x-base64tobinary">
							<xsl:value-of select="unparsed-text(., 'x-binarytobase64')"/>
						</xsl:result-document>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
		</xsl:if>
	</xsl:template>
	<xsl:template match="@* | node()" mode="altova:step2">
		<xsl:copy copy-namespaces="no">
			<xsl:apply-templates select="@* | node()" mode="#current"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="table" mode="altova:step2">
		<xsl:variable name="altova:table">
			<xsl:copy copy-namespaces="no">
				<xsl:apply-templates select="@* | node()" mode="#current"/>
			</xsl:copy>
		</xsl:variable>
		<xsl:apply-templates select="$altova:table" mode="altova:generate-table"/>
	</xsl:template>
	<xsl:variable name="altova:toc-xslt-tree1">
		<xsl:for-each select="$altova:DesignAfterStep1">
			<xsl:apply-templates mode="altova:generate-toc-xslt-tree"/>
		</xsl:for-each>
	</xsl:variable>
	<xsl:template match="altova:level" mode="altova:generate-toc-xslt-tree">
		<altova:level altova:design-id="{generate-id()}">
			<xsl:apply-templates mode="#current"/>
		</altova:level>
	</xsl:template>
	<xsl:template match="altova:marker" mode="altova:generate-toc-xslt-tree">
		<altova:marker altova:design-id="{generate-id()}" altova:name="{@altova:name}">
			<xsl:apply-templates mode="#current"/>
		</altova:marker>
	</xsl:template>
	<xsl:template match="@* | text()" mode="altova:generate-toc-xslt-tree"/>
	<xsl:template match="altova:UnescapedText" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy copy-namespaces="no">
			<xsl:apply-templates mode="#current"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="text()" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="altova:num-lvl" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:attribute name="altova:level-design-id" select="$altova:level-design-id"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="altova:num-seq" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:attribute name="altova:marker-design-id" select="generate-id( ancestor::altova:marker[1] )"/>
		</xsl:copy>
	</xsl:template>
	<xsl:variable name="altova:toc-xslt-tree" select="$altova:toc-xslt-tree1"/>
	<xsl:key name="altova:bookmark-key" match="altova:bookmark" use="@name"/>
	<xsl:key name="altova:toc-xslt-tree-key" match="altova:level | altova:toc | altova:ref | altova:marker" use="@altova:design-id"/>
	<xsl:template match="altova:main-document" mode="altova:step2">
		<xsl:apply-templates select="node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:level" mode="altova:step2">
		<xsl:apply-templates select="node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:bookmark | altova:hyperlink" mode="altova:step2">
		<a>
			<xsl:apply-templates select="@* | node()" mode="#current"/>
		</a>
	</xsl:template>
	<xsl:template match="altova:hyperlink/@href[starts-with(.,'#')]" mode="altova:step2">
		<xsl:variable name="altova:bookmark-name" select="substring(.,2)"/>
		<xsl:attribute name="href">
			<xsl:variable name="altova:source-document" select="ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
			<xsl:variable name="altova:target-document" select="key('altova:bookmark-key',$altova:bookmark-name,$altova:DesignAfterStep1)[1]/ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>
			<xsl:value-of select="concat(altova:calc-relative-path($altova:source-document/@url,$altova:target-document/@url),.)"/>
		</xsl:attribute>
	</xsl:template>
	<xsl:template match="altova:toc | altova:ref" mode="altova:step2">
		<xsl:apply-templates select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', generate-id( current() ) )/node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:marker" mode="altova:step2">
		<a name="{generate-id()}"/>
		<xsl:apply-templates select="node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:num-lvl" mode="altova:step2">
		<xsl:variable name="altova:format" select="@altova:format"/>
		<xsl:variable name="altova:omit-levels" select="@altova:omit-levels"/>
		<xsl:variable name="altova:level-design-id">
			<xsl:choose>
				<xsl:when test="@altova:level-design-id">
					<xsl:value-of select="@altova:level-design-id"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="generate-id( ancestor::altova:level[1] )"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', $altova:level-design-id )">
			<xsl:choose>
				<xsl:when test="$altova:omit-levels">
					<xsl:number level="multiple" count="altova:level[ count( ancestor::altova:level ) >= $altova:omit-levels ]" format="{$altova:format}"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:number level="multiple" count="altova:level" format="{$altova:format}"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="altova:num-seq" mode="altova:step2">
		<xsl:variable name="altova:format" select="@altova:format"/>
		<xsl:variable name="altova:marker-design-id">
			<xsl:choose>
				<xsl:when test="@altova:marker-design-id">
					<xsl:value-of select="@altova:marker-design-id"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="generate-id( ancestor::altova:marker[1] )"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', $altova:marker-design-id )">
			<xsl:variable name="altova:name" select="@altova:name"/>
			<xsl:number level="any" count="altova:marker[ @altova:name = $altova:name ]" format="{$altova:format}"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:function name="altova:calc-relative-path" as="xs:string">
		<xsl:param name="altova:source-path"/>
		<xsl:param name="altova:target-path"/>
		<xsl:choose>
			<xsl:when test="$altova:source-path = $altova:target-path">
				<xsl:sequence select="''"/>
			</xsl:when>
			<xsl:when test="starts-with($altova:target-path,'http:') or starts-with($altova:target-path,'ftp:') or starts-with($altova:target-path,'file:')">
				<xsl:sequence select="$altova:target-path"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="altova:source-parts" select="tokenize($altova:source-path,'[/\\]')"/>
				<xsl:variable name="altova:target-parts" select="tokenize($altova:target-path,'[/\\]')"/>
				<xsl:variable name="altova:common-part-count" select="sum(for $i in (1 to count($altova:source-parts) - 1) return if( subsequence($altova:source-parts,1,$i) = subsequence($altova:target-parts,1,$i) ) then 1 else 0)"/>
				<xsl:sequence select="string-join((for $i in ($altova:common-part-count + 1 to count($altova:source-parts) - 1) return '..',for $i in ($altova:common-part-count + 1 to count($altova:target-parts)) return $altova:target-parts[$i]),'/')"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:map-preview-filepath" as="xs:string">
		<xsl:param name="filepath"/>
		<xsl:sequence select="altovaext:create-temp-file-mapping($filepath)" use-when="function-available('altovaext:create-temp-file-mapping',1)"/>
		<xsl:sequence select="$filepath" use-when="not(function-available('altovaext:create-temp-file-mapping',1))"/>
	</xsl:function>
	<xsl:function name="altova:is-cell-empty" as="xs:boolean">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="altova:is-node-empty( $altova:cell )"/>
	</xsl:function>
	<xsl:function name="altova:is-node-empty" as="xs:boolean">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::div ) or boolean( $altova:child/self::span ) or boolean( $altova:child/self::a ) ) and altova:is-node-empty( $altova:child ) ) )"/>
	</xsl:function>
	<xsl:function name="altova:col-span" as="xs:integer">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="if ( exists( $altova:cell/@colspan ) ) then xs:integer( $altova:cell/@colspan ) else 1"/>
	</xsl:function>
	<xsl:template match="@* | node()" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current">
				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="tbody" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:choose>
			<xsl:when test="empty(tr)">
				<xsl:copy>
					<tr>
						<td/>
					</tr>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="th | td" mode="altova:generate-table">
		<xsl:choose>
			<xsl:when test="altova:is-cell-empty( . )">
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:text>&#160;</xsl:text>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="substring-before($normLength, 'px')"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * $altova:nPxPerIn"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * $altova:nPxPerIn div 2.54"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'mm')) * $altova:nPxPerIn div 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * $altova:nPxPerIn div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * $altova:nPxPerIn div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$normLength"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength, 'px')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'px')) div $altova:nPxPerIn * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'in')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * 25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'cm')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * 10"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'mm')">
				<xsl:value-of select="substring-before($normLength, 'mm') "/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pt')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * 25.4 div 72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength, 'pc')">
				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * 25.4 div 6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number($normLength) div $altova:nPxPerIn * 25.4"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="sps:getTitleNumber" as="xs:integer">
		<xsl:param name="itemTitle" as="xs:string"/>
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:sequence select="count( distinct-values($XML/COURSE-LIST/COURSE[TITLE &lt;=$itemTitle]/TITLE) )"/>
	</xsl:function>
	<xsl:function name="sps:getSubtitleNumber" as="xs:string">
		<xsl:param name="itemTitle" as="xs:string"/>
		<xsl:param name="itemSubtitle" as="xs:string"/>
		<xsl:param name="itemId" as="xs:integer"/>
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:sequence select="$XML3/Number-List/Number[Integer=count(distinct-values($XML/COURSE-LIST/COURSE[TITLE = $itemTitle and SUBTITLE &lt; $itemSubtitle]/@id)) + count(distinct-values($XML/COURSE-LIST/COURSE[TITLE = $itemTitle and SUBTITLE = $itemSubtitle and @id &lt;= $itemId]/@id))]/SRoman"/>
	</xsl:function>
	<xsl:function name="sps:getCalendarWidth" as="xs:string">
		<xsl:param name="cityCount" as="xs:integer"/>
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:sequence select="if ( $cityCount &gt;= 3 ) then &apos;60%&apos; else if ($cityCount = 2) then &apos;40%&apos; else &apos;20%&apos;"/>
	</xsl:function>
	<xsl:function name="sps:getCountryName">
		<xsl:param name="country" as="xs:string"/>
		<xsl:param name="language" as="xs:string"/>
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:sequence select="$XML5/COUNTRY-LIST/COUNTRY[NAME=$country]/NAME[@language=$language]"/>
	</xsl:function>
	<xsl:function name="sps:getLocationGroups">
		<xsl:param name="locationGroups" as="xs:string"/>
		<xsl:variable name="XML2" select="document($XML2)"/>
		<xsl:variable name="XML3" select="document($XML3)"/>
		<xsl:variable name="XML4" select="document($XML4)"/>
		<xsl:variable name="XML5" select="document($XML5)"/>
		<xsl:sequence select="fn:tokenize($locationGroups, &quot;,&quot;)"/>
	</xsl:function>
</xsl:stylesheet>
